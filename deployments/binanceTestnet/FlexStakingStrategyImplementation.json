{
  "address": "0x8419F9e3A9Fff6Bf757812F70C7437aC4E5e2b54",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedPeriods",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Sell",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earnings",
          "type": "uint256"
        }
      ],
      "name": "SetEarnings",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemsPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startStakingTimetsmap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainder",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposits",
          "type": "uint256"
        }
      ],
      "name": "UpdateDeposits",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "__addedDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_daysCount",
          "type": "uint256"
        }
      ],
      "name": "addDays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressBook",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "canSell",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_withdrawToken",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_monthsCount",
          "type": "uint256"
        }
      ],
      "name": "claimTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimedPeriodsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "year_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "day_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        }
      ],
      "name": "depositsToRemove",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositToRemove",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "depostitsDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "finalYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finalMonth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevFinalYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevFinalMonth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        }
      ],
      "name": "earnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "estimateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewards_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedPeriods_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "estimateSell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "finalTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "getAllExpiredMoths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialMonths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialRewardsRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "initialTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressBook",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minLockYears",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxLockYears",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialMonths",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialRewardsRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yearDeprecationRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isStakedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "itemsPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedEarningsMonth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedEarningsPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "year_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedEarningsYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLockYears",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMonthsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLockYears",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minMonthsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "remainder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_withdrawToken",
          "type": "address"
        }
      ],
      "name": "sell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_year",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_month",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_formatedEarning",
          "type": "uint256"
        }
      ],
      "name": "setEarnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "startStakingTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "timestampPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "year_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "day_",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawnRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yearDeprecationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x44901a9a9e87ba6a4ea2f0e0bc62b4955e48ae91e2128bd450019ba78455031f",
  "receipt": {
    "to": null,
    "from": "0x2458B3c26F4E904Af6Ff26f09FA23AcFE4C90AD8",
    "contractAddress": "0x8419F9e3A9Fff6Bf757812F70C7437aC4E5e2b54",
    "transactionIndex": 1,
    "gasUsed": "2709611",
    "logsBloom": "0x
    "blockHash": "0x2c61caf872e0437bbac4f164f8ff83fe2e5069f1fce3549ff7862f518a551724",
    "transactionHash": "0x44901a9a9e87ba6a4ea2f0e0bc62b4955e48ae91e2128bd450019ba78455031f",
    "logs": [],
    "blockNumber": 34318463,
    "cumulativeGasUsed": "2730611",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "484aaa5084cf8712325300fcc6dac02e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedPeriods\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"}],\"name\":\"SetEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemsPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startStakingTimetsmap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"}],\"name\":\"UpdateDeposits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__addedDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daysCount\",\"type\":\"uint256\"}],\"name\":\"addDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"canSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawToken\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_monthsCount\",\"type\":\"uint256\"}],\"name\":\"claimTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimedPeriodsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"year_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"}],\"name\":\"depositsToRemove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositToRemove\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depostitsDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevFinalYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevFinalMonth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"}],\"name\":\"earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"estimateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedPeriods_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"estimateSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"finalTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getAllExpiredMoths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialRewardsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"initialTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressBook\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minLockYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLockYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMonths\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialRewardsRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yearDeprecationRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isStakedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"itemsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedEarningsMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedEarningsPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"year_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedEarningsYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockYears\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMonthsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockYears\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMonthsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"remainder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawToken\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_formatedEarning\",\"type\":\"uint256\"}],\"name\":\"setEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"startStakingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"timestampPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"year_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawnRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearDeprecationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/stakings/FlexStakingStrategy.sol\":\"FlexStakingStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/core/stakings/FlexStakingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nimport { ITreasury } from \\\"../../interfaces/ITreasury.sol\\\";\\r\\nimport { IAddressBook } from \\\"../../interfaces/IAddressBook.sol\\\";\\r\\nimport { IItem } from \\\"../../interfaces/IItem.sol\\\";\\r\\nimport { IStakingStrategy } from \\\"../../interfaces/IStakingStrategy.sol\\\";\\r\\nimport { DateTimeLib } from \\\"../../utils/DateTimeLib.sol\\\";\\r\\n\\r\\ncontract FlexStakingStrategy is IStakingStrategy, ReentrancyGuardUpgradeable, UUPSUpgradeable {\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- STORAGE ----------------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    address public addressBook;\\r\\n    uint256 public minLockYears;\\r\\n    uint256 public maxLockYears;\\r\\n    uint256 public initialMonths;\\r\\n    uint256 public initialRewardsRate;\\r\\n    uint256 public yearDeprecationRate;\\r\\n    uint256 public minMonthsCount;\\r\\n    uint256 public maxMonthsCount;\\r\\n\\r\\n    mapping(uint256 year => mapping(uint256 month => uint256)) public earnings;\\r\\n    mapping(uint256 year => mapping(uint256 month => uint256 depositToRemove))\\r\\n        public depositsToRemove;\\r\\n    mapping(uint256 year => mapping(uint256 month => uint256 deposit)) public deposits;\\r\\n    uint256 public lastUpdatedTimestamp;\\r\\n\\r\\n    mapping(address item => mapping(uint256 tokenId => bool)) public isStakedToken;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public initialTimestamp;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public startStakingTimestamp;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public itemsPrice;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public claimedPeriodsCount;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public finalTimestamp;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public remainder;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public withdrawnRewards;\\r\\n\\r\\n    struct DepositsDate {\\r\\n        uint256 finalYear;\\r\\n        uint256 finalMonth;\\r\\n        uint256 prevFinalYear;\\r\\n        uint256 prevFinalMonth;\\r\\n    }\\r\\n    mapping(address item => mapping(uint256 tokenId => DepositsDate)) public depostitsDate;\\r\\n\\r\\n    uint256 public lastUpdatedEarningsYear;\\r\\n    uint256 public lastUpdatedEarningsMonth;\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- EVENTS  ----------------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    event UpdateDeposits(uint256 year, uint256 month, uint256 deposits);\\r\\n    event SetEarnings(uint256 year, uint256 month, uint256 earnings);\\r\\n    event Stake(\\r\\n        address itemAddress,\\r\\n        uint256 itemId,\\r\\n        address itemOwner,\\r\\n        uint256 itemsPrice,\\r\\n        uint256 initialTimestamp,\\r\\n        uint256 startStakingTimetsmap,\\r\\n        uint256 finalTimestamp,\\r\\n        uint256 remainder\\r\\n    );\\r\\n    event Claim(\\r\\n        address itemAddress,\\r\\n        uint256 itemId,\\r\\n        address itemOwner,\\r\\n        uint256 rewards,\\r\\n        uint256 claimedPeriods,\\r\\n        address withdrawToken,\\r\\n        uint256 withdrawTokenAmount\\r\\n    );\\r\\n    event Sell(\\r\\n        address itemAddress,\\r\\n        uint256 itemId,\\r\\n        address itemOwner,\\r\\n        uint256 sellPrice,\\r\\n        address withdrawToken,\\r\\n        uint256 withdrawTokenAmount\\r\\n    );\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- DEPLOY & UPGRADE  ------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    function initialize(\\r\\n        address _addressBook,\\r\\n        uint256 _minLockYears,\\r\\n        uint256 _maxLockYears,\\r\\n        uint256 _initialMonths,\\r\\n        uint256 _initialRewardsRate,\\r\\n        uint256 _yearDeprecationRate\\r\\n    ) public initializer {\\r\\n        addressBook = _addressBook;\\r\\n        minLockYears = _minLockYears;\\r\\n        maxLockYears = _maxLockYears;\\r\\n        initialMonths = _initialMonths;\\r\\n        initialRewardsRate = _initialRewardsRate;\\r\\n        yearDeprecationRate = _yearDeprecationRate;\\r\\n\\r\\n        (uint256 initialYear, uint256 initialMonth, ) = DateTimeLib.timestampToDate(\\r\\n            DateTimeLib.subMonths(_blockTimestamp(), 1)\\r\\n        );\\r\\n        lastUpdatedTimestamp = DateTimeLib.timestampFromDate(initialYear, initialMonth, 1);\\r\\n\\r\\n        maxMonthsCount = 12 * _maxLockYears + 1;\\r\\n        minMonthsCount = 12 * _minLockYears + 1;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal view override {\\r\\n        IAddressBook(addressBook).enforceIsProductOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // -----  PRODUCT OWNER ACTIONS  ------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    function setEarnings(uint256 _year, uint256 _month, uint256 _formatedEarning) external {\\r\\n        IAddressBook(addressBook).enforceIsProductOwner(msg.sender);\\r\\n        require(_formatedEarning > 0, \\\"earnings cannot be zero!\\\");\\r\\n\\r\\n        uint256 earningsTimestamp = DateTimeLib.timestampFromDate(_year, _month, 1);\\r\\n        require(\\r\\n            earningsTimestamp <= lastUpdatedTimestamp,\\r\\n            \\\"cannot set earnings for an unexpired period!\\\"\\r\\n        );\\r\\n        uint256 _earnings = _formatedEarning * 1e18;\\r\\n        earnings[_year][_month] = _earnings;\\r\\n\\r\\n        lastUpdatedEarningsYear = _year;\\r\\n        lastUpdatedEarningsMonth = _month;\\r\\n\\r\\n        emit SetEarnings(_year, _month, _earnings);\\r\\n    }\\r\\n\\r\\n    function updateDeposits() public {\\r\\n        IAddressBook(addressBook).enforceIsProductOwner(msg.sender);\\r\\n\\r\\n        uint256 _lastUpdatedTimestamp = lastUpdatedTimestamp;\\r\\n        uint256 diffMonths = DateTimeLib.diffMonths(_lastUpdatedTimestamp, _blockTimestamp());\\r\\n        if (diffMonths == 0) return;\\r\\n        uint256 monthsToUpdate = diffMonths - 1;\\r\\n        if (monthsToUpdate == 0) return;\\r\\n        for (uint256 i; i < monthsToUpdate; ++i) {\\r\\n            (uint256 prevYear, uint256 prevMonth, ) = DateTimeLib.timestampToDate(\\r\\n                _lastUpdatedTimestamp\\r\\n            );\\r\\n            _lastUpdatedTimestamp = DateTimeLib.addMonths(_lastUpdatedTimestamp, 1);\\r\\n            (uint256 year, uint256 month, ) = DateTimeLib.timestampToDate(_lastUpdatedTimestamp);\\r\\n            uint256 newDeposits = deposits[year][month] +\\r\\n                deposits[prevYear][prevMonth] -\\r\\n                depositsToRemove[year][month];\\r\\n            deposits[year][month] = newDeposits;\\r\\n\\r\\n            emit UpdateDeposits(year, month, newDeposits);\\r\\n        }\\r\\n        lastUpdatedTimestamp = _lastUpdatedTimestamp;\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // -----  PROTOCOL ACTIONS  -----------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    function stake(address _itemAddress, uint256 _itemId, bytes memory) external {\\r\\n        IAddressBook(addressBook).enforceIsItemContract(msg.sender);\\r\\n\\r\\n        // Initial data\\r\\n        isStakedToken[_itemAddress][_itemId] = true;\\r\\n        uint256 _initialTimestamp = _blockTimestamp();\\r\\n        initialTimestamp[_itemAddress][_itemId] = _initialTimestamp;\\r\\n        (uint256 year, uint256 month, uint256 initialDay) = DateTimeLib.timestampToDate(\\r\\n            _initialTimestamp\\r\\n        );\\r\\n\\r\\n        uint256 _startStakingTimestamp = DateTimeLib.timestampFromDate(year, month, 1);\\r\\n        startStakingTimestamp[_itemAddress][_itemId] = _startStakingTimestamp;\\r\\n\\r\\n        uint256 _itemsPrice = IItem(_itemAddress).price();\\r\\n        itemsPrice[_itemAddress][_itemId] = _itemsPrice;\\r\\n\\r\\n        // Remainder\\r\\n        uint256 daysInStartMonth = DateTimeLib.getDaysInMonth(_startStakingTimestamp);\\r\\n        uint256 ratio = (1e18 * initialDay) / (daysInStartMonth + 1);\\r\\n        uint256 _remainder = (_itemsPrice * ratio) / 1e18;\\r\\n        remainder[_itemAddress][_itemId] = _remainder;\\r\\n        // Final date\\r\\n        uint256 _finalTimestamp = DateTimeLib.addMonths(_startStakingTimestamp, maxMonthsCount);\\r\\n        finalTimestamp[_itemAddress][_itemId] = _finalTimestamp;\\r\\n        // Earnings date\\r\\n        uint256 earningsTimestamp = DateTimeLib.addMonths(_startStakingTimestamp, initialMonths);\\r\\n        (uint256 earningsYear, uint256 earningsMonth, ) = DateTimeLib.timestampToDate(\\r\\n            earningsTimestamp\\r\\n        );\\r\\n        // Next earnings date\\r\\n        (uint256 nextEarningsYear, uint256 nextEarningsMonth, ) = DateTimeLib.timestampToDate(\\r\\n            DateTimeLib.addMonths(earningsTimestamp, 1)\\r\\n        );\\r\\n        // Prev final date\\r\\n        (uint256 prevFinalYear, uint256 prevFinalMonth, ) = DateTimeLib.timestampToDate(\\r\\n            DateTimeLib.subMonths(_finalTimestamp, 1)\\r\\n        );\\r\\n        // Final date\\r\\n        (uint256 finalYear, uint256 finalMonth, ) = DateTimeLib.timestampToDate(_finalTimestamp);\\r\\n\\r\\n        // Set deposits\\r\\n        deposits[earningsYear][earningsMonth] += _itemsPrice - _remainder;\\r\\n        deposits[nextEarningsYear][nextEarningsMonth] += _remainder;\\r\\n        // Set deposits to remove\\r\\n        depositsToRemove[prevFinalYear][prevFinalMonth] += _itemsPrice - _remainder;\\r\\n        depositsToRemove[finalYear][finalMonth] += _remainder;\\r\\n        depostitsDate[_itemAddress][_itemId] = DepositsDate(\\r\\n            finalYear,\\r\\n            finalMonth,\\r\\n            prevFinalYear,\\r\\n            prevFinalMonth\\r\\n        );\\r\\n\\r\\n        address _itemOwner = IERC721(_itemAddress).ownerOf(_itemId);\\r\\n\\r\\n        emit Stake(\\r\\n            _itemAddress,\\r\\n            _itemId,\\r\\n            _itemOwner,\\r\\n            _itemsPrice,\\r\\n            _initialTimestamp,\\r\\n            _startStakingTimestamp,\\r\\n            _finalTimestamp,\\r\\n            _remainder\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- USER ACTIONS  ----------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    function claim(address _itemAddress, uint256 _itemId, address _withdrawToken) external {\\r\\n        address _itemOwner = IERC721(_itemAddress).ownerOf(_itemId);\\r\\n        require(msg.sender == _itemOwner, \\\"only item owner!\\\");\\r\\n        _enforceIsStakedToken(_itemAddress, _itemId);\\r\\n\\r\\n        (uint256 rewards, uint256 claimedPeriods) = estimateRewards(_itemAddress, _itemId);\\r\\n        require(rewards > 0, \\\"rewards!\\\");\\r\\n\\r\\n        withdrawnRewards[_itemAddress][_itemId] += rewards;\\r\\n        claimedPeriodsCount[_itemAddress][_itemId] += claimedPeriods;\\r\\n\\r\\n        // Withdraw\\r\\n        address _treasury = IAddressBook(addressBook).treasury();\\r\\n        uint256 withdrawTokenAmount = ITreasury(_treasury).usdAmountToToken(\\r\\n            rewards,\\r\\n            _withdrawToken\\r\\n        );\\r\\n        ITreasury(_treasury).withdraw(_withdrawToken, withdrawTokenAmount, msg.sender);\\r\\n\\r\\n        emit Claim(\\r\\n            _itemAddress,\\r\\n            _itemId,\\r\\n            _itemOwner,\\r\\n            rewards,\\r\\n            claimedPeriods,\\r\\n            _withdrawToken,\\r\\n            withdrawTokenAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function sell(address _itemAddress, uint256 _itemId, address _withdrawToken) external {\\r\\n        address _itemOwner = IERC721(_itemAddress).ownerOf(_itemId);\\r\\n        require(msg.sender == _itemOwner, \\\"only item owner!\\\");\\r\\n        _enforceIsStakedToken(_itemAddress, _itemId);\\r\\n\\r\\n        require(canSell(_itemAddress, _itemId), \\\"can't sell!\\\");\\r\\n\\r\\n        uint256 currentTimestamp = _blockTimestamp();\\r\\n        (uint256 currentYear, uint256 currentMonth, ) = DateTimeLib.timestampToDate(\\r\\n            currentTimestamp\\r\\n        );\\r\\n\\r\\n        uint256 _finalTimestamp = finalTimestamp[_itemAddress][_itemId];\\r\\n\\r\\n        uint256 sellTimestamp = DateTimeLib.subMonths(currentTimestamp, 1);\\r\\n        if (sellTimestamp > _finalTimestamp) sellTimestamp = _finalTimestamp;\\r\\n        (uint256 sellYear, uint256 sellMonth, ) = DateTimeLib.timestampToDate(sellTimestamp);\\r\\n\\r\\n        uint256 diffMonths = DateTimeLib.diffMonths(sellTimestamp, _finalTimestamp);\\r\\n\\r\\n        uint256 _remainder = remainder[_itemAddress][_itemId];\\r\\n        DepositsDate memory d = depostitsDate[_itemAddress][_itemId];\\r\\n        uint256 _itemsPrice = itemsPrice[_itemAddress][_itemId];\\r\\n\\r\\n        if (diffMonths == 0) {\\r\\n            // final\\r\\n            depositsToRemove[sellYear][sellMonth] += _remainder;\\r\\n        } else if (diffMonths == 1) {\\r\\n            // prev final\\r\\n            depositsToRemove[d.finalYear][d.finalMonth] += _itemsPrice;\\r\\n        } else {\\r\\n            // early\\r\\n            depositsToRemove[currentYear][currentMonth] += _itemsPrice;\\r\\n        }\\r\\n        depositsToRemove[d.prevFinalYear][d.prevFinalMonth] -= _itemsPrice - _remainder;\\r\\n        depositsToRemove[d.finalYear][d.finalMonth] -= _remainder;\\r\\n\\r\\n        uint256 sellPrice = estimateSell(_itemAddress, _itemId);\\r\\n\\r\\n        withdrawnRewards[_itemAddress][_itemId] += sellPrice;\\r\\n\\r\\n        address _treasury = IAddressBook(addressBook).treasury();\\r\\n        uint256 withdrawTokenAmount = ITreasury(_treasury).usdAmountToToken(\\r\\n            sellPrice,\\r\\n            _withdrawToken\\r\\n        );\\r\\n        require(withdrawTokenAmount > 0, \\\"zero amount!\\\");\\r\\n\\r\\n        IItem(_itemAddress).burn(_itemId);\\r\\n        ITreasury(_treasury).withdraw(_withdrawToken, withdrawTokenAmount, msg.sender);\\r\\n\\r\\n        emit Sell(\\r\\n            _itemAddress,\\r\\n            _itemId,\\r\\n            _itemOwner,\\r\\n            sellPrice,\\r\\n            _withdrawToken,\\r\\n            withdrawTokenAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- VIEW  ------------------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    function stakingType() external pure returns (string memory) {\\r\\n        return \\\"flex\\\";\\r\\n    }\\r\\n\\r\\n    function currentPeriod() external view returns (uint256 year_, uint256 month_, uint256 day_) {\\r\\n        return timestampPeriod(_blockTimestamp());\\r\\n    }\\r\\n\\r\\n    function timestampPeriod(\\r\\n        uint256 _timestamp\\r\\n    ) public pure returns (uint256 year_, uint256 month_, uint256 day_) {\\r\\n        (year_, month_, day_) = DateTimeLib.timestampToDate(_timestamp);\\r\\n    }\\r\\n\\r\\n    function claimTimestamp(\\r\\n        address _itemAddress,\\r\\n        uint256 _itemId,\\r\\n        uint256 _monthsCount\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 _finalTimestamp = finalTimestamp[_itemAddress][_itemId];\\r\\n        uint256 _startStakingTimestamp = startStakingTimestamp[_itemAddress][_itemId];\\r\\n        uint256 _nextClaimTimestamp = DateTimeLib.addMonths(_startStakingTimestamp, _monthsCount);\\r\\n        if (_nextClaimTimestamp > _finalTimestamp) _nextClaimTimestamp = _finalTimestamp;\\r\\n        return _nextClaimTimestamp;\\r\\n    }\\r\\n\\r\\n    function getAllExpiredMoths(\\r\\n        address _itemAddress,\\r\\n        uint256 _itemId\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 _startStakingTimestamp = startStakingTimestamp[_itemAddress][_itemId];\\r\\n        uint256 _maxMonthsCount = maxMonthsCount;\\r\\n        uint256 allExpiredMonths = DateTimeLib.diffMonths(\\r\\n            _startStakingTimestamp,\\r\\n            _blockTimestamp()\\r\\n        );\\r\\n        if (allExpiredMonths > _maxMonthsCount) allExpiredMonths = _maxMonthsCount;\\r\\n        return allExpiredMonths;\\r\\n    }\\r\\n\\r\\n    function estimateRewards(\\r\\n        address _itemAddress,\\r\\n        uint256 _itemId\\r\\n    ) public view returns (uint256 rewards_, uint256 claimedPeriods_) {\\r\\n        uint256 _startStakingTimestamp = startStakingTimestamp[_itemAddress][_itemId];\\r\\n        uint256 _itemsPrice = itemsPrice[_itemAddress][_itemId];\\r\\n        uint256 _claimedPeriodsCount = claimedPeriodsCount[_itemAddress][_itemId];\\r\\n        uint256 _remainder = remainder[_itemAddress][_itemId];\\r\\n        uint256 _maxMonthsCount = maxMonthsCount;\\r\\n        uint256 _initialMonths = initialMonths;\\r\\n        uint256 _initialRewardsRate = initialRewardsRate;\\r\\n\\r\\n        uint256 allExpiredMonths = getAllExpiredMoths(_itemAddress, _itemId);\\r\\n\\r\\n        for (uint256 i = _claimedPeriodsCount; i < allExpiredMonths; ++i) {\\r\\n            if (i <= _initialMonths) {\\r\\n                uint256 initialItemsPrice = _itemsPrice;\\r\\n                if (i == 0) {\\r\\n                    initialItemsPrice = _itemsPrice - _remainder;\\r\\n                } else if (i == _initialMonths) {\\r\\n                    initialItemsPrice = _remainder;\\r\\n                }\\r\\n                rewards_ += (initialItemsPrice * _initialRewardsRate) / 10000;\\r\\n                if (i < _initialMonths) {\\r\\n                    ++claimedPeriods_;\\r\\n                    continue;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            (uint256 year, uint256 month, ) = DateTimeLib.timestampToDate(\\r\\n                DateTimeLib.addMonths(_startStakingTimestamp, i)\\r\\n            );\\r\\n\\r\\n            uint256 _earnings = earnings[year][month];\\r\\n            if (_earnings == 0) break;\\r\\n\\r\\n            uint256 earningsItemsPrice = _itemsPrice;\\r\\n            if (i == _initialMonths) {\\r\\n                earningsItemsPrice = _itemsPrice - _remainder;\\r\\n            } else if (i == _maxMonthsCount - 1) {\\r\\n                earningsItemsPrice = _remainder;\\r\\n            }\\r\\n\\r\\n            rewards_ += (earningsItemsPrice * _earnings) / deposits[year][month];\\r\\n            ++claimedPeriods_;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function canSell(address _itemAddress, uint256 _itemId) public view returns (bool) {\\r\\n        uint256 _claimedPeriodsCount = claimedPeriodsCount[_itemAddress][_itemId];\\r\\n        return\\r\\n            _claimedPeriodsCount >= minMonthsCount &&\\r\\n            _claimedPeriodsCount == getAllExpiredMoths(_itemAddress, _itemId);\\r\\n    }\\r\\n\\r\\n    function estimateSell(address _itemAddress, uint256 _itemId) public view returns (uint256) {\\r\\n        uint256 allExpiredMonths = getAllExpiredMoths(_itemAddress, _itemId);\\r\\n        if (allExpiredMonths < minMonthsCount) return 0;\\r\\n        --allExpiredMonths; // sub additional splited month\\r\\n\\r\\n        uint256 _itemsPrice = itemsPrice[_itemAddress][_itemId];\\r\\n        uint256 deprecation = (_itemsPrice * allExpiredMonths * yearDeprecationRate) / 12 / 10000;\\r\\n\\r\\n        if (deprecation > _itemsPrice) return 0;\\r\\n        return _itemsPrice - deprecation;\\r\\n    }\\r\\n\\r\\n    function lastUpdatedEarningsPeriod() external view returns (uint256 year_, uint256 month_) {\\r\\n        year_ = lastUpdatedEarningsYear;\\r\\n        month_ = lastUpdatedEarningsMonth;\\r\\n    }\\r\\n\\r\\n    function _enforceIsStakedToken(address _itemAddress, uint256 _itemId) internal view {\\r\\n        require(isStakedToken[_itemAddress][_itemId], \\\"only staked token\\\");\\r\\n    }\\r\\n\\r\\n    // Only mainnet \\r\\n    // function _blockTimestamp() internal view returns (uint256) {\\r\\n    //     return block.timestamp;\\r\\n    // }\\r\\n\\r\\n    // Only testnet\\r\\n    uint256 public __addedDays;\\r\\n\\r\\n    function _blockTimestamp() internal view returns (uint256) {\\r\\n        return block.timestamp + __addedDays * 1 days;\\r\\n    }\\r\\n\\r\\n    function addDays(uint256 _daysCount) external {\\r\\n        __addedDays += _daysCount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9f64253a1cd2b5adaffeed54a2589ef32cdfc612113ec90684f2203e36bfdfbb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAddressBook.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IAddressBook {\\r\\n    function treasury() external view returns (address);\\r\\n\\r\\n    function enforceIsItemContract(address _contract) external view;\\r\\n\\r\\n    function enforceIsProductOwner(address _account) external view;\\r\\n    \\r\\n    function productOwner() external view returns (address);\\r\\n\\r\\n    function items(address _item) external view returns (bool);\\r\\n\\r\\n    function stakingStrategies(address _stakingStrategy) external view returns (bool);\\r\\n\\r\\n    function enforceIsStakingStrategyContract(address _contract) external view;\\r\\n    // function stakingPlatform() external view returns (address);\\r\\n    // function itemsFactory() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x643c1a51d3fca90328cb1a4718f91cccf7fc8d37fe0ce8b22bd2a30e30477f6c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IItem.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IItem {\\r\\n    function burn(uint256 _tokenId) external;\\r\\n\\r\\n    function price() external view returns (uint256);\\r\\n\\r\\n    function maxSupply() external returns (uint256);\\r\\n\\r\\n    function totalMintedAmount() external returns (uint256);\\r\\n\\r\\n    function tokenStakingStrategy(uint256 _tokenId) external returns (address);\\r\\n\\r\\n    function mint(address _stakingStrategy, address _payToken, bytes memory _payload) external;\\r\\n\\r\\n    function stopSell() external;\\r\\n\\r\\n    function setNewMaxSupply(uint256 _maxSupply) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1188c4907579677274648b4bb97a3b12d8730b676dca6b57b47ba237d2b43761\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IStakingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IStakingStrategy {\\r\\n    function stake(address _itemAddress, uint256 _itemId, bytes memory _payload) external;\\r\\n}\",\"keccak256\":\"0x2e53f5319fb3596800810274c35761f8d9ee08e5a2753630873fd6efc637e597\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface ITreasury {\\r\\n    function enforceIsSupportedToken(address _token) external view;\\r\\n\\r\\n    function usdAmountToToken(uint256 _usdAmount, address _token) external view returns (uint256);\\r\\n\\r\\n    function withdraw(address _token, uint256 _amount, address _recipient) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xae441e1c2de113c7115599c44fc56bbad87c814d712596dcbe1e847797519823\",\"license\":\"UNLICENSED\"},\"contracts/utils/DateTimeLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary DateTimeLib {\\r\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\r\\n    uint constant SECONDS_PER_MINUTE = 60;\\r\\n    int constant OFFSET19700101 = 2440588;\\r\\n\\r\\n    uint constant DOW_MON = 1;\\r\\n    uint constant DOW_TUE = 2;\\r\\n    uint constant DOW_WED = 3;\\r\\n    uint constant DOW_THU = 4;\\r\\n    uint constant DOW_FRI = 5;\\r\\n    uint constant DOW_SAT = 6;\\r\\n    uint constant DOW_SUN = 7;\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\r\\n    // the date conversion algorithm from\\r\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\r\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // days = day\\r\\n    //      - 32075\\r\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\r\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\r\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\r\\n    //      - offset\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\r\\n        require(year >= 1970);\\r\\n        int _year = int(year);\\r\\n        int _month = int(month);\\r\\n        int _day = int(day);\\r\\n\\r\\n        int __days = _day -\\r\\n            32075 +\\r\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\r\\n            4 +\\r\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\r\\n            12 -\\r\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\r\\n            4 -\\r\\n            OFFSET19700101;\\r\\n\\r\\n        _days = uint(__days);\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\r\\n    // the date conversion algorithm from\\r\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\r\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // int L = days + 68569 + offset\\r\\n    // int N = 4 * L / 146097\\r\\n    // L = L - (146097 * N + 3) / 4\\r\\n    // year = 4000 * (L + 1) / 1461001\\r\\n    // L = L - 1461 * year / 4 + 31\\r\\n    // month = 80 * L / 2447\\r\\n    // dd = L - 2447 * month / 80\\r\\n    // L = month / 11\\r\\n    // month = month + 2 - 12 * L\\r\\n    // year = 100 * (N - 49) + year + L\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\r\\n        int __days = int(_days);\\r\\n\\r\\n        int L = __days + 68569 + OFFSET19700101;\\r\\n        int N = (4 * L) / 146097;\\r\\n        L = L - (146097 * N + 3) / 4;\\r\\n        int _year = (4000 * (L + 1)) / 1461001;\\r\\n        L = L - (1461 * _year) / 4 + 31;\\r\\n        int _month = (80 * L) / 2447;\\r\\n        int _day = L - (2447 * _month) / 80;\\r\\n        L = _month / 11;\\r\\n        _month = _month + 2 - 12 * L;\\r\\n        _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n        year = uint(_year);\\r\\n        month = uint(_month);\\r\\n        day = uint(_day);\\r\\n    }\\r\\n\\r\\n    function timestampFromDate(\\r\\n        uint year,\\r\\n        uint month,\\r\\n        uint day\\r\\n    ) internal pure returns (uint timestamp) {\\r\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\r\\n    }\\r\\n\\r\\n    function timestampFromDateTime(\\r\\n        uint year,\\r\\n        uint month,\\r\\n        uint day,\\r\\n        uint hour,\\r\\n        uint minute,\\r\\n        uint second\\r\\n    ) internal pure returns (uint timestamp) {\\r\\n        timestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            hour *\\r\\n            SECONDS_PER_HOUR +\\r\\n            minute *\\r\\n            SECONDS_PER_MINUTE +\\r\\n            second;\\r\\n    }\\r\\n\\r\\n    function timestampToDate(\\r\\n        uint timestamp\\r\\n    ) internal pure returns (uint year, uint month, uint day) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function timestampToDateTime(\\r\\n        uint timestamp\\r\\n    ) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        uint secs = timestamp % SECONDS_PER_DAY;\\r\\n        hour = secs / SECONDS_PER_HOUR;\\r\\n        secs = secs % SECONDS_PER_HOUR;\\r\\n        minute = secs / SECONDS_PER_MINUTE;\\r\\n        second = secs % SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\r\\n        if (year >= 1970 && month > 0 && month <= 12) {\\r\\n            uint daysInMonth = _getDaysInMonth(year, month);\\r\\n            if (day > 0 && day <= daysInMonth) {\\r\\n                valid = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isValidDateTime(\\r\\n        uint year,\\r\\n        uint month,\\r\\n        uint day,\\r\\n        uint hour,\\r\\n        uint minute,\\r\\n        uint second\\r\\n    ) internal pure returns (bool valid) {\\r\\n        if (isValidDate(year, month, day)) {\\r\\n            if (hour < 24 && minute < 60 && second < 60) {\\r\\n                valid = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\r\\n        (uint year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        leapYear = _isLeapYear(year);\\r\\n    }\\r\\n\\r\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\r\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\r\\n    }\\r\\n\\r\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\r\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\r\\n    }\\r\\n\\r\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\r\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\r\\n    }\\r\\n\\r\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\r\\n        (uint year, uint month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        daysInMonth = _getDaysInMonth(year, month);\\r\\n    }\\r\\n\\r\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\r\\n        if (\\r\\n            month == 1 ||\\r\\n            month == 3 ||\\r\\n            month == 5 ||\\r\\n            month == 7 ||\\r\\n            month == 8 ||\\r\\n            month == 10 ||\\r\\n            month == 12\\r\\n        ) {\\r\\n            daysInMonth = 31;\\r\\n        } else if (month != 2) {\\r\\n            daysInMonth = 30;\\r\\n        } else {\\r\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // 1 = Monday, 7 = Sunday\\r\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\r\\n        uint _days = timestamp / SECONDS_PER_DAY;\\r\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\r\\n    }\\r\\n\\r\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\r\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\r\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\r\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\r\\n        uint secs = timestamp % SECONDS_PER_DAY;\\r\\n        hour = secs / SECONDS_PER_HOUR;\\r\\n    }\\r\\n\\r\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\r\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\r\\n        minute = secs / SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\r\\n        second = timestamp % SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        year += _years;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            (timestamp % SECONDS_PER_DAY);\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        month += _months;\\r\\n        year += (month - 1) / 12;\\r\\n        month = ((month - 1) % 12) + 1;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            (timestamp % SECONDS_PER_DAY);\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _seconds;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        year -= _years;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            (timestamp % SECONDS_PER_DAY);\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\r\\n        year = yearMonth / 12;\\r\\n        month = (yearMonth % 12) + 1;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            (timestamp % SECONDS_PER_DAY);\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _seconds;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        (uint fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\r\\n        (uint toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\r\\n        _years = toYear - fromYear;\\r\\n    }\\r\\n\\r\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        (uint fromYear, uint fromMonth, ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\r\\n        (uint toYear, uint toMonth, ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\r\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\r\\n    }\\r\\n\\r\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\r\\n    }\\r\\n\\r\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\r\\n    }\\r\\n\\r\\n    function diffMinutes(\\r\\n        uint fromTimestamp,\\r\\n        uint toTimestamp\\r\\n    ) internal pure returns (uint _minutes) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function diffSeconds(\\r\\n        uint fromTimestamp,\\r\\n        uint toTimestamp\\r\\n    ) internal pure returns (uint _seconds) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _seconds = toTimestamp - fromTimestamp;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9565c27da60a87dd693dc2798ad1cd0f5c13039e25ddb4a52941ac3aa89b0a3c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a08060405234610031573060805261300790816100378239608051818181610bda01528181610cc901526116720152f35b600080fdfe608060405260048036101561001357600080fd5b600090813560e01c9081630604061814611ecc5781631421857414611eae578163254d8a1214611e9057816328d5708e14611e7257816328eac12314611e545781632bd4978014611e275781632e6155c714611dff5781633540c919146119485781633659cfe61461164b5781633e12170f146112415781633f315ab7146111fe57816345ff4c801461101b5781634d29565e14610ff65781634d6f382414610f925781634f1ef28614610c8a57816352d1902d14610bc65781635d34893b146109fd5781635da12a6d146109ba5781636924ac951461098d5781636e675dbf14610926578163731121591461090857816377c830ee146108db5781637fcbd9ca146108bd578163819f8f11146108895781638a9e55761461086b5781639a05d060146108285781639af6bdb31461080a5781639e96a26014610539578163a3ad309a146104f6578163b1b0db13146104b3578163b99c5a1414610470578163c175b3d114610454578163c76659a114610422578163d7dad7c314610404578163dabd5d65146103da578163de6c7fd214610391578163e544b2e21461034c57508063ec78c4c31461032e578063f1dfa867146102b6578063f23d30df14610273578063f5887cdd1461024a578063f5c62a6e1461021a5763fbaf894c146101fa57600080fd5b34610217578060031936011261021757602060a254604051908152f35b80fd5b5034610217576040366003190112610217576020610242610239611f05565b602435906124c7565b604051908152f35b50346102175780600319360112610217576097546040516001600160a01b039091168152602090f35b5034610217576040366003190112610217576020906040906001600160a01b0361029b611f05565b16815260a98352818120602435825283522054604051908152f35b5034610217576060366003190112610217576020906103146102d6611f05565b6001600160a01b031680835260a8845260408084206024358086529086528185205492855260a5865281852090855285529092205460443590612e87565b90808211610326575b50604051908152f35b90503861031d565b50346102175780600319360112610217576020609b54604051908152f35b82346102175760203660031901126102175761038d61037062015180843504612b5f565b604080519384526020840192909252908201529081906060820190565b0390f35b82346102175760403660031901126102175760209060ff906040906001600160a01b036103bc611f05565b16815260a38452818120602435825284522054166040519015158152f35b905034610400576020366003190112610400576103fa903560ae5461228f565b60ae5580f35b5080fd5b8234610217578060031936011261021757602060ad54604051908152f35b823461021757604036600319011261021757602061044a610441611f05565b602435906126fc565b6040519015158152f35b823461021757806003193601126102175761046d6122b8565b80f35b8234610217576040366003190112610217576020906040906001600160a01b03610498611f05565b16815260a68352818120602435825283522054604051908152f35b8234610217576040366003190112610217576020906040906001600160a01b036104db611f05565b16815260a48352818120602435825283522054604051908152f35b8234610217576040366003190112610217576020906040906001600160a01b0361051e611f05565b16815260a88352818120602435825283522054604051908152f35b9050346104005761054936611f1b565b6040516331a9108f60e11b815280850183905291936001600160a01b038481169491939092919060209081816024818a5afa80156107ff578589916105ac938c916107e2575b50169361059d853314612488565b6105a782826127c8565b61250f565b92909182156107b457878a5260aa815260408a20898b52815260408a206105d484825461228f565b9055878a5260a7815260408a20898b52815260408a206105f585825461228f565b90558987828860975416604051928380926361d027b360e01b82525afa80156107355788918391610787575b5060408051636676fbc560e11b8152808c018881526001600160a01b038b166020820152909b939092169185918c918291010381845afa998a1561077c57839a610744575b50803b156107405760408051631a4ca37b60e21b81526001600160a01b038a16938101938452602084018c90523391840191909152918391839182908490829060600103925af180156107355761070d575b5050907f547e9b3e3fc8b51c03d30648b377a2b951e562fabd27fb3e91925c87859e192a9860e0989796959493926040519889528801526040870152606086015260808501521660a083015260c0820152a180f35b61071f90999897969594939299611f81565b610731579091929394959689386106b8565b8980fd5b6040513d84823e3d90fd5b8280fd5b8480929b508194503d8311610775575b61075e8183611fb1565b81010312610770578b91519838610666565b600080fd5b503d610754565b6040513d85823e3d90fd5b6107a79150843d86116107ad575b61079f8183611fb1565b810190612469565b38610621565b503d610795565b866064916040519162461bcd60e51b83528201526008602482015267726577617264732160c01b6044820152fd5b6107f99150853d87116107ad5761079f8183611fb1565b3861058f565b6040513d8b823e3d90fd5b8234610217578060031936011261021757602060ac54604051908152f35b8234610217576040366003190112610217576020906040906001600160a01b03610850611f05565b16815260a78352818120602435825283522054604051908152f35b82346102175780600319360112610217576020609954604051908152f35b82346102175760403660031901126102175760406108b16108a8611f05565b6024359061250f565b82519182526020820152f35b8234610217578060031936011261021757602060ae54604051908152f35b82346102175760406020916108ef36611eef565b90825260a0845282822090825283522054604051908152f35b82346102175780600319360112610217576020609e54604051908152f35b8234610217576040366003190112610217576080906040906001600160a01b0361094e611f05565b16815260ab6020528181206024358252602052208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b82346102175760406020916109a136611eef565b908252609f845282822090825283522054604051908152f35b8234610217576040366003190112610217576020906040906001600160a01b036109e2611f05565b16815260aa8352818120602435825283522054604051908152f35b82346102175760603660031901126102175760975460243590833590604435906001600160a01b0316803b15610bc2578460249160405192838092630ceb3b9b60e21b8252338b8301525afa8015610bb757908591610b9f575b50508015610b5b57610a69838361284f565b60a25410610b0257670de0b6b3a764000080820291820403610aef5790610ae97fe3bbfa79647df19774fdc8af2dbe30c95db0f1d2bb02678af401cc570495b14a9392828652609f602052604086208487526020528060408720558260ac558360ad55604051938493846040919493926060820195825260208201520152565b0390a180f35b634e487b7160e01b845260118552602484fd5b60405162461bcd60e51b8152602081870152602c60248201527f63616e6e6f7420736574206561726e696e677320666f7220616e20756e65787060448201526b6972656420706572696f642160a01b6064820152608490fd5b60405162461bcd60e51b8152602081870152601860248201527f6561726e696e67732063616e6e6f74206265207a65726f2100000000000000006044820152606490fd5b610ba890611f81565b610bb3578386610a57565b8380fd5b6040513d87823e3d90fd5b8480fd5b8234610217578060031936011261021757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610c20576020604051600080516020612fb28339815191528152f35b60849060206040519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b9050604036600319011261040057610ca0611f05565b60243567ffffffffffffffff8111610bb357610cbf9036908401611fef565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190610cf83084141561207f565b610d15600080516020612fb28339815191529382855416146120e0565b858160975416803b15610400578160249160405192838092630ceb3b9b60e21b8252338c8301525afa801561073557610f7a575b50507f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d825750505061046d9150612141565b6040516352d1902d60e01b815260209493918416919085818881865afa60009181610f4b575b50610e085760405162461bcd60e51b8152808801879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b95919294939503610ef55750610e1d84612141565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610eed575b610e58575b50505080f35b610edb9260008060405194610e6c86611f95565b602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c85870152660819985a5b195960ca1b60408701528481519101845af4903d15610ee4573d610ebe81611fd3565b90610ecc6040519283611fb1565b8152600081943d92013e6121d1565b50388080610e52565b606092506121d1565b506001610e4d565b60405162461bcd60e51b8152908101839052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90918782813d8311610f73575b610f628183611fb1565b810103126102175750519038610da8565b503d610f58565b610f8390611f81565b610f8e578538610d49565b8580fd5b8234610217578060031936011261021757506040516040810181811067ffffffffffffffff821117610fe1579161038d926040528152630ccd8caf60e31b602082015260405191829182612036565b604183634e487b7160e01b6000525260246000fd5b8234610217578060031936011261021757604060ac5460ad5482519182526020820152f35b9050346104005760c036600319011261040057611036611f05565b90602480359160443585549460ff8660081c1615958680976111f1575b80156111da575b156111805760ff19811660011788558661116f575b5060018060a01b03166bffffffffffffffffffffffff60a01b60975416176097558360985580609955606435609a55608435609b5560a435609c556110d16110ca620151806110c46110bf61282d565b612ec2565b04612b5f565b509061284f565b60a25580600c0290600c82040361115d576001810180911161115d57609e5582600c0292600c84040361114c576001830180931161114c575050609d556111155780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b634e487b7160e01b85526011905283fd5b50634e487b7160e01b85526011905283fd5b61ffff19166101011787553861106f565b60405162461bcd60e51b8152602081860152602e818701527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561105a5750600160ff82161461105a565b50600160ff821610611053565b8234610217576040366003190112610217576020906040906001600160a01b03611226611f05565b16815260a58352818120602435825283522054604051908152f35b82346102175760603660031901126102175761125b611f05565b916024359060443567ffffffffffffffff8111610bb35761127f9036908301611fef565b506097546001600160a01b0392908316803b15610bc2578460249160405192838092634006035160e11b825233888301525afa8015610bb757611637575b508261131c95169081855260209360a3855260408620828752855260408620600160ff198254161790556112ef61282d565b83875260a486526040872083885286528060408820556201518092611315848304612b5f565b9a9161284f565b9285895260a5885260408920828a5288528360408a20556040519163501ad8ff60e11b8352888389818a5afa92831561162c578a936115fd575b50868a5260a6895260408a20818b5289528260408b205561138261137b878704612b5f565b5090612d41565b670de0b6b3a76400009b808d02908d8204036115ea57600182018092116115ea57938c6113b5829594938e999897612449565b6113bf9083612266565b049789885260a98c52604088208389528c528860408920558b89609e546113e6908a612e87565b998a928d825260a88152604082208783528152836040832055609a5461140c908c612e87565b85611418818304612b5f565b5091909261142590612e02565b0461142f90612b5f565b509290918861143d89612ec2565b0461144790612b5f565b509990980461145590612b5f565b5097611461919b61229c565b91865260a1855260408620908652845260408520908154906114829161228f565b9055835260a18252604083209083528152604082208d8154906114a49161228f565b90556114b08d8a61229c565b84835260a0825260408320868452825260408320908154906114d19161228f565b905585825260a08152604082208383528152604082208d8154906114f49161228f565b90556040519561150387611f4f565b865280860192835260408601938452606086019485528d825260ab8152604082209087835252604090209351845551600184015551600283015551906003015580604051996331a9108f60e11b8b528a0152898989815a91602492fa9081156115df577f4f3aeb95ef90e269e25a364ec94a5a917cebe0799f3ebb164c9d8a40db32511a9a6101009a8d936115c0575b50604051998a528901521660408701526060860152608085015260a084015260c083015260e0820152a180f35b816115d89294503d85116107ad5761079f8183611fb1565b918d611593565b6040513d8d823e3d90fd5b634e487b7160e01b8c5260118a5260248cfd5b9092508881813d8311611625575b6116158183611fb1565b810103126107705751918b611356565b503d61160b565b6040513d8c823e3d90fd5b6116418591611f81565b610bb357856112bd565b9050346104005760208060031936011261074057611667611f05565b906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811661169f3082141561207f565b6116bc600080516020612fb28339815191529183835416146120e0565b858260975416803b15610400578160249160405192838092630ceb3b9b60e21b8252338c8301525afa801561073557611934575b5050604051908382019282841067ffffffffffffffff85111761191f578360405287835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143541660001461174f57505050505061046d9150612141565b859293949516906040516352d1902d60e01b815286818981865afa600091816118f0575b506117d35760405162461bcd60e51b8152808901889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b969192939594960361189a57506117e982612141565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2825115801590611892575b611825575b5050505080f35b600080611888956040519561183987611f95565b602787527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c86880152660819985a5b195960ca1b60408801525190845af4903d15610ee4573d610ebe81611fd3565b503880808061181e565b506000611819565b60405162461bcd60e51b8152908101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90918882813d8311611918575b6119078183611fb1565b810103126102175750519038611773565b503d6118fd565b604187634e487b7160e01b6000525260246000fd5b61193d90611f81565b610f8e5785386116f0565b9050346104005761195836611f1b565b6040516331a9108f60e11b815280850183905292936001600160a01b03808616949193909291602081602481895afa8015611df45784918991611dd5575b5016956119a4873314612488565b6119ae82826127c8565b6119b882826126fc565b15611da35781611b1c9187611a628b611aed6040611acb876119d861282d565b62015180906119e8828204612b5f565b508a899492945260a8602052868920858a52602052611a0a878a205493612ec2565b91838311611d9b575b611a21611a2a918404612b5f565b50949093612f51565b938b8a5260a9602052878a20868b52602052878a20549b8c96818c5260ab602052898c20908c526020526003898c208a519d8e611f4f565b8d815490528d602060018301549101528d8b6002830154910152015460608d01528a5260a66020528d888b20908b52602052878a2054948015600014611d4b57505050875260a0602052848720908752602052838620611ac383825461228f565b90555b61229c565b9281850151815260a0602052818120606086015182526020522091825461229c565b905580518c5260a0602052602060408d209101518c52602052611b1560408c2091825461229c565b9055612748565b9085885260aa6020526040882081895260205260408820611b3e83825461228f565b90558460208560975416604051928380926361d027b360e01b82525afa80156107ff5785918a91611d2c575b5060408051636676fbc560e11b81528089018681526001600160a01b03881660208281019190915291999490931692909189918291010381845afa96871561162c578a97611cf8575b508615611cc557873b1561073157604051630852cd8d60e31b81528281018490528a81602481838d5af180156115df57611cb0575b5090818a923b156107405760408051631a4ca37b60e21b81526001600160a01b038816938101938452602084018a90523391840191909152918391839182908490829060600103925af1801561073557611c8c575b5095927f5d431a60d05c2d376ada5a88a66968da29820db1acf8a7ce7b3086c7cc3191cf95928860c0969360405196875260208701526040860152606085015216608083015260a0820152a180f35b611c9c9097969594939297611f81565b611cac5790919293948738611c3d565b8780fd5b611cbd909a91929a611f81565b989038611be8565b60405162461bcd60e51b8152602081840152600c60248201526b7a65726f20616d6f756e742160a01b6044820152606490fd5b9096506020813d602011611d24575b81611d1460209383611fb1565b8101031261073157519538611bb3565b3d9150611d07565b611d45915060203d6020116107ad5761079f8183611fb1565b38611b6a565b9193509150600103611d7d5750508651865260a060205283862060208801518752602052838620611ac382825461228f565b875260a0602052848720908752602052838620611ac382825461228f565b839250611a13565b60405162461bcd60e51b8152602081870152600b60248201526a63616e27742073656c6c2160a81b6044820152606490fd5b611dee915060203d6020116107ad5761079f8183611fb1565b38611996565b6040513d8a823e3d90fd5b8234610217576040366003190112610217576020610242611e1e611f05565b60243590612748565b8234610217576040602091611e3b36611eef565b90825260a1845282822090825283522054604051908152f35b82346102175780600319360112610217576020609c54604051908152f35b82346102175780600319360112610217576020609a54604051908152f35b82346102175780600319360112610217576020609854604051908152f35b82346102175780600319360112610217576020609d54604051908152f35b823461021757806003193601126102175761038d610370620151806110c461282d565b6040906003190112610770576004359060243590565b600435906001600160a01b038216820361077057565b6060906003190112610770576001600160a01b03600435818116810361077057916024359160443590811681036107705790565b6080810190811067ffffffffffffffff821117611f6b57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111611f6b57604052565b6060810190811067ffffffffffffffff821117611f6b57604052565b90601f8019910116810190811067ffffffffffffffff821117611f6b57604052565b67ffffffffffffffff8111611f6b57601f01601f191660200190565b81601f820112156107705780359061200682611fd3565b926120146040519485611fb1565b8284526020838301011161077057816000926020809301838601378301015290565b6020808252825181830181905290939260005b82811061206b57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501612049565b1561208657565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b156120e757565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b803b1561217657600080516020612fb283398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b9192901561223357508151156121e5575090565b3b156121ee5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156122465750805190602001fd5b60405162461bcd60e51b81529081906122629060048301612036565b0390fd5b8181029291811591840414171561227957565b634e487b7160e01b600052601160045260246000fd5b9190820180921161227957565b9190820391821161227957565b60001981146122795760010190565b6097546001600160a01b03166000813b1561021757602481604093845192838092630ceb3b9b60e21b82523360048301525afa801561243f57612430575b5060a2549161230c61230661282d565b84612f51565b91821561241657600019830192831161241c57821561241657805b838110612337575050505060a255565b612411907fb2f0ca0b2a366734800f5e4bf2608f0b4677deb5fbed86b6d191b22c57196bfb6123c161237d97612409612386886123da61238e620151809d8e8704612b5f565b50949096612e02565b9d8e04612b5f565b50818c5260a16020818152948d20828e5285528d8d2054978d528085528d8d20958d529484528c8c20549097919661228f565b858b5260a083528b8b20878c5283528b8b20549061229c565b91848a52815289892090858a525280898920558851938493846040919493926060820195825260208201520152565b0390a16122a9565b612327565b50505050565b634e487b7160e01b81526011600452602490fd5b61243990611f81565b386122f6565b83513d84823e3d90fd5b8115612453570490565b634e487b7160e01b600052601260045260246000fd5b9081602091031261077057516001600160a01b03811681036107705790565b1561248f57565b60405162461bcd60e51b815260206004820152601060248201526f6f6e6c79206974656d206f776e65722160801b6044820152606490fd5b60018060a01b031660005260a56020526040600020906000526020526040600020546124fe609e54916124f861282d565b90612f51565b9080821161250a575090565b905090565b9160009260009260018060a01b038216908160005260a56020526040600020816000526020526040600020548260005260a66020526040600020826000526020526040600020548360005260a76020526040600020836000526020526040600020549360005260a960205260406000208360005260205260406000205490609e54926125a1609a5495609b54986124c7565b95965b8688106125b6575b5050505050505050565b909192939495969899868a11156126a7575b6125d9620151806110c48c86612e87565b5081600093929352609f602052604060002081600052602052604060002054801561269d57868a8e0361266857509161264a61265c9461265093612629612656966126248d8d61229c565b612266565b9160005260a160205260406000209060005260205260406000205490612449565b9061228f565b9b6122a9565b996122a9565b969594939291906125a4565b89600094929394198101116122795761265c94612656948f6126509561264a94612629928f600019010361226657508c612266565b50509a99506125ac565b6126cb9082858c6126e057506126c461271091612624898961229c565b049061228f565b868a10156125c8579961265661265c916122a9565b898d146126f5575b612710916126c491612266565b50866126e8565b9060018060a01b03821660005260a760205260406000208160005260205260406000205490609d548210159283612734575b50505090565b61273f9293506124c7565b1438808061272e565b9061275381836124c7565b91609d5483106127c05782156122795760018060a01b031660005260a6602052604060002090600052602052612710600c6127a461279b604060002054946000190185612266565b609c5490612266565b04048181116127b9576127b69161229c565b90565b5050600090565b505050600090565b60018060a01b031660005260a360205260406000209060005260205260ff60406000205416156127f457565b60405162461bcd60e51b815260206004820152601160248201527037b7363c9039ba30b5b2b2103a37b5b2b760791b6044820152606490fd5b60ae546201518090818102918183041490151715612279576127b6904261228f565b906107b28210610770576112c090818301918212926000928382129283159580158516908716176129e0576004958661289d612898600c9586612891876129f4565b0590612a1f565b612a3b565b0580617d491901908112156001166129cd5760011983018381136001166129a757846128c8856129f4565b0590858202918083058714901517156129ba57906128e591612a06565b61016f90808202918205036129a7579084612901920590612a1f565b94611324809501948512908115169116176129945791612926916128916064946129f4565b0580600302906003820503612981579083612942920590612a06565b9162253d8b19830192831360011661296e57620151809283810293818504149015171561296e57505090565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118452602483fd5b634e487b7160e01b855260118652602485fd5b634e487b7160e01b885260118952602488fd5b634e487b7160e01b895260118a52602489fd5b634e487b7160e01b875260118852602487fd5b634e487b7160e01b85526011600452602485fd5b90600d19820191821360011661227957565b8181039291600013801582851316918412161761227957565b9190916000838201938412911290801582169115161761227957565b906105b5918083029283050361227957565b6107b2811061077057617d4a198301928313600116612279576112c09081810191821291600093848312938415908015861690821617612b4b57612aa160049788612891612898600c9788612891896129f4565b60011983018381136001166129a75784612aba856129f4565b0590858202918083058714901517156129ba5790612ad791612a06565b61016f90808202918205036129a7579084612af3920590612a1f565b94611324809501948512908115169116176129945791612b18916128916064946129f4565b0580600302906003820503612981579083612b34920590612a06565b9162253d8b19830192831360011661296e57505090565b634e487b7160e01b86526011600452602486fd5b62010bd99182820192831291600092838212908015821691151617612d2d576226496501928262253d8c85129112908015821691151617612d19578260021b6004938482058103610aef5762023ab180920591828102908105830361299457600381019085600383129112908015821691151617612994579085612be4920590612a06565b600181016001811285831290801582169115161761299457610fa090808202918205036129945762164b09612c2691059186612c1f84612a3b565b0590612a06565b91601f83019285601f85129112908015821691151617612994578260500292605084058103612d065761098f8094059384810290810585036129cd57906050612c70920590612a06565b94600b840593600281019082600283129112908015821691151617612cf35784600c0290600c82058603612ce05790612ca891612a06565b96603019830192831360011661296e578260640292606484050361296e575050612cdb9291612cd691612a1f565b612a1f565b929190565b634e487b7160e01b835260118952602483fd5b634e487b7160e01b825260118852602482fd5b634e487b7160e01b865260118752602486fd5b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526011600452602483fd5b90600181148015612df8575b8015612dee575b8015612de4575b8015612dda575b8015612dd0575b8015612dc6575b15612d7c575050601f90565b600214612d895750601e90565b60038116159081612db9575b8115612dac575b5015612da757601d90565b601c90565b6101909150061538612d9c565b6064810615159150612d95565b50600c8114612d70565b50600a8114612d69565b5060088114612d62565b5060078114612d5b565b5060058114612d54565b5060038114612d4d565b9062015180612e12818404612b5f565b9190829160018201821161227957612e2f600c918284049061228f565b9106906001820180921161227957612e5993612e4b8383612d41565b809111612e7f575b50612a4d565b8181029080820483149015171561227957612e769184069061228f565b91821061077057565b925038612e53565b9190612ea66201518091612e9c838604612b5f565b939092849361228f565b60001981019190821161227957612e2f600c918284049061228f565b9062015180612ed2818404612b5f565b91908291600c810290808204600c1490151715612279576000199180830190811161227957612f009161228f565b90810190811161227957600c8082049106906001820180921161227957612f2b93612e4b8383612d41565b8181029080820483149015171561227957612f489184069061228f565b91821161077057565b81811161077057612f74612f6a62015180809304612b5f565b5092909304612b5f565b50600c820291808304600c149015171561227957612f919161228f565b600c830292808404600c1490151715612279576127b692611ac69161229c56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220d1a4944eaaee7b7d3ea44a4b19c2a773e6b941712c03a4cc3c6f36a2a36759b364736f6c63430008120033",
  "deployedBytecode": "0x608060405260048036101561001357600080fd5b600090813560e01c9081630604061814611ecc5781631421857414611eae578163254d8a1214611e9057816328d5708e14611e7257816328eac12314611e545781632bd4978014611e275781632e6155c714611dff5781633540c919146119485781633659cfe61461164b5781633e12170f146112415781633f315ab7146111fe57816345ff4c801461101b5781634d29565e14610ff65781634d6f382414610f925781634f1ef28614610c8a57816352d1902d14610bc65781635d34893b146109fd5781635da12a6d146109ba5781636924ac951461098d5781636e675dbf14610926578163731121591461090857816377c830ee146108db5781637fcbd9ca146108bd578163819f8f11146108895781638a9e55761461086b5781639a05d060146108285781639af6bdb31461080a5781639e96a26014610539578163a3ad309a146104f6578163b1b0db13146104b3578163b99c5a1414610470578163c175b3d114610454578163c76659a114610422578163d7dad7c314610404578163dabd5d65146103da578163de6c7fd214610391578163e544b2e21461034c57508063ec78c4c31461032e578063f1dfa867146102b6578063f23d30df14610273578063f5887cdd1461024a578063f5c62a6e1461021a5763fbaf894c146101fa57600080fd5b34610217578060031936011261021757602060a254604051908152f35b80fd5b5034610217576040366003190112610217576020610242610239611f05565b602435906124c7565b604051908152f35b50346102175780600319360112610217576097546040516001600160a01b039091168152602090f35b5034610217576040366003190112610217576020906040906001600160a01b0361029b611f05565b16815260a98352818120602435825283522054604051908152f35b5034610217576060366003190112610217576020906103146102d6611f05565b6001600160a01b031680835260a8845260408084206024358086529086528185205492855260a5865281852090855285529092205460443590612e87565b90808211610326575b50604051908152f35b90503861031d565b50346102175780600319360112610217576020609b54604051908152f35b82346102175760203660031901126102175761038d61037062015180843504612b5f565b604080519384526020840192909252908201529081906060820190565b0390f35b82346102175760403660031901126102175760209060ff906040906001600160a01b036103bc611f05565b16815260a38452818120602435825284522054166040519015158152f35b905034610400576020366003190112610400576103fa903560ae5461228f565b60ae5580f35b5080fd5b8234610217578060031936011261021757602060ad54604051908152f35b823461021757604036600319011261021757602061044a610441611f05565b602435906126fc565b6040519015158152f35b823461021757806003193601126102175761046d6122b8565b80f35b8234610217576040366003190112610217576020906040906001600160a01b03610498611f05565b16815260a68352818120602435825283522054604051908152f35b8234610217576040366003190112610217576020906040906001600160a01b036104db611f05565b16815260a48352818120602435825283522054604051908152f35b8234610217576040366003190112610217576020906040906001600160a01b0361051e611f05565b16815260a88352818120602435825283522054604051908152f35b9050346104005761054936611f1b565b6040516331a9108f60e11b815280850183905291936001600160a01b038481169491939092919060209081816024818a5afa80156107ff578589916105ac938c916107e2575b50169361059d853314612488565b6105a782826127c8565b61250f565b92909182156107b457878a5260aa815260408a20898b52815260408a206105d484825461228f565b9055878a5260a7815260408a20898b52815260408a206105f585825461228f565b90558987828860975416604051928380926361d027b360e01b82525afa80156107355788918391610787575b5060408051636676fbc560e11b8152808c018881526001600160a01b038b166020820152909b939092169185918c918291010381845afa998a1561077c57839a610744575b50803b156107405760408051631a4ca37b60e21b81526001600160a01b038a16938101938452602084018c90523391840191909152918391839182908490829060600103925af180156107355761070d575b5050907f547e9b3e3fc8b51c03d30648b377a2b951e562fabd27fb3e91925c87859e192a9860e0989796959493926040519889528801526040870152606086015260808501521660a083015260c0820152a180f35b61071f90999897969594939299611f81565b610731579091929394959689386106b8565b8980fd5b6040513d84823e3d90fd5b8280fd5b8480929b508194503d8311610775575b61075e8183611fb1565b81010312610770578b91519838610666565b600080fd5b503d610754565b6040513d85823e3d90fd5b6107a79150843d86116107ad575b61079f8183611fb1565b810190612469565b38610621565b503d610795565b866064916040519162461bcd60e51b83528201526008602482015267726577617264732160c01b6044820152fd5b6107f99150853d87116107ad5761079f8183611fb1565b3861058f565b6040513d8b823e3d90fd5b8234610217578060031936011261021757602060ac54604051908152f35b8234610217576040366003190112610217576020906040906001600160a01b03610850611f05565b16815260a78352818120602435825283522054604051908152f35b82346102175780600319360112610217576020609954604051908152f35b82346102175760403660031901126102175760406108b16108a8611f05565b6024359061250f565b82519182526020820152f35b8234610217578060031936011261021757602060ae54604051908152f35b82346102175760406020916108ef36611eef565b90825260a0845282822090825283522054604051908152f35b82346102175780600319360112610217576020609e54604051908152f35b8234610217576040366003190112610217576080906040906001600160a01b0361094e611f05565b16815260ab6020528181206024358252602052208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b82346102175760406020916109a136611eef565b908252609f845282822090825283522054604051908152f35b8234610217576040366003190112610217576020906040906001600160a01b036109e2611f05565b16815260aa8352818120602435825283522054604051908152f35b82346102175760603660031901126102175760975460243590833590604435906001600160a01b0316803b15610bc2578460249160405192838092630ceb3b9b60e21b8252338b8301525afa8015610bb757908591610b9f575b50508015610b5b57610a69838361284f565b60a25410610b0257670de0b6b3a764000080820291820403610aef5790610ae97fe3bbfa79647df19774fdc8af2dbe30c95db0f1d2bb02678af401cc570495b14a9392828652609f602052604086208487526020528060408720558260ac558360ad55604051938493846040919493926060820195825260208201520152565b0390a180f35b634e487b7160e01b845260118552602484fd5b60405162461bcd60e51b8152602081870152602c60248201527f63616e6e6f7420736574206561726e696e677320666f7220616e20756e65787060448201526b6972656420706572696f642160a01b6064820152608490fd5b60405162461bcd60e51b8152602081870152601860248201527f6561726e696e67732063616e6e6f74206265207a65726f2100000000000000006044820152606490fd5b610ba890611f81565b610bb3578386610a57565b8380fd5b6040513d87823e3d90fd5b8480fd5b8234610217578060031936011261021757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610c20576020604051600080516020612fb28339815191528152f35b60849060206040519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b9050604036600319011261040057610ca0611f05565b60243567ffffffffffffffff8111610bb357610cbf9036908401611fef565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190610cf83084141561207f565b610d15600080516020612fb28339815191529382855416146120e0565b858160975416803b15610400578160249160405192838092630ceb3b9b60e21b8252338c8301525afa801561073557610f7a575b50507f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d825750505061046d9150612141565b6040516352d1902d60e01b815260209493918416919085818881865afa60009181610f4b575b50610e085760405162461bcd60e51b8152808801879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b95919294939503610ef55750610e1d84612141565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610eed575b610e58575b50505080f35b610edb9260008060405194610e6c86611f95565b602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c85870152660819985a5b195960ca1b60408701528481519101845af4903d15610ee4573d610ebe81611fd3565b90610ecc6040519283611fb1565b8152600081943d92013e6121d1565b50388080610e52565b606092506121d1565b506001610e4d565b60405162461bcd60e51b8152908101839052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90918782813d8311610f73575b610f628183611fb1565b810103126102175750519038610da8565b503d610f58565b610f8390611f81565b610f8e578538610d49565b8580fd5b8234610217578060031936011261021757506040516040810181811067ffffffffffffffff821117610fe1579161038d926040528152630ccd8caf60e31b602082015260405191829182612036565b604183634e487b7160e01b6000525260246000fd5b8234610217578060031936011261021757604060ac5460ad5482519182526020820152f35b9050346104005760c036600319011261040057611036611f05565b90602480359160443585549460ff8660081c1615958680976111f1575b80156111da575b156111805760ff19811660011788558661116f575b5060018060a01b03166bffffffffffffffffffffffff60a01b60975416176097558360985580609955606435609a55608435609b5560a435609c556110d16110ca620151806110c46110bf61282d565b612ec2565b04612b5f565b509061284f565b60a25580600c0290600c82040361115d576001810180911161115d57609e5582600c0292600c84040361114c576001830180931161114c575050609d556111155780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b634e487b7160e01b85526011905283fd5b50634e487b7160e01b85526011905283fd5b61ffff19166101011787553861106f565b60405162461bcd60e51b8152602081860152602e818701527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561105a5750600160ff82161461105a565b50600160ff821610611053565b8234610217576040366003190112610217576020906040906001600160a01b03611226611f05565b16815260a58352818120602435825283522054604051908152f35b82346102175760603660031901126102175761125b611f05565b916024359060443567ffffffffffffffff8111610bb35761127f9036908301611fef565b506097546001600160a01b0392908316803b15610bc2578460249160405192838092634006035160e11b825233888301525afa8015610bb757611637575b508261131c95169081855260209360a3855260408620828752855260408620600160ff198254161790556112ef61282d565b83875260a486526040872083885286528060408820556201518092611315848304612b5f565b9a9161284f565b9285895260a5885260408920828a5288528360408a20556040519163501ad8ff60e11b8352888389818a5afa92831561162c578a936115fd575b50868a5260a6895260408a20818b5289528260408b205561138261137b878704612b5f565b5090612d41565b670de0b6b3a76400009b808d02908d8204036115ea57600182018092116115ea57938c6113b5829594938e999897612449565b6113bf9083612266565b049789885260a98c52604088208389528c528860408920558b89609e546113e6908a612e87565b998a928d825260a88152604082208783528152836040832055609a5461140c908c612e87565b85611418818304612b5f565b5091909261142590612e02565b0461142f90612b5f565b509290918861143d89612ec2565b0461144790612b5f565b509990980461145590612b5f565b5097611461919b61229c565b91865260a1855260408620908652845260408520908154906114829161228f565b9055835260a18252604083209083528152604082208d8154906114a49161228f565b90556114b08d8a61229c565b84835260a0825260408320868452825260408320908154906114d19161228f565b905585825260a08152604082208383528152604082208d8154906114f49161228f565b90556040519561150387611f4f565b865280860192835260408601938452606086019485528d825260ab8152604082209087835252604090209351845551600184015551600283015551906003015580604051996331a9108f60e11b8b528a0152898989815a91602492fa9081156115df577f4f3aeb95ef90e269e25a364ec94a5a917cebe0799f3ebb164c9d8a40db32511a9a6101009a8d936115c0575b50604051998a528901521660408701526060860152608085015260a084015260c083015260e0820152a180f35b816115d89294503d85116107ad5761079f8183611fb1565b918d611593565b6040513d8d823e3d90fd5b634e487b7160e01b8c5260118a5260248cfd5b9092508881813d8311611625575b6116158183611fb1565b810103126107705751918b611356565b503d61160b565b6040513d8c823e3d90fd5b6116418591611f81565b610bb357856112bd565b9050346104005760208060031936011261074057611667611f05565b906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811661169f3082141561207f565b6116bc600080516020612fb28339815191529183835416146120e0565b858260975416803b15610400578160249160405192838092630ceb3b9b60e21b8252338c8301525afa801561073557611934575b5050604051908382019282841067ffffffffffffffff85111761191f578360405287835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143541660001461174f57505050505061046d9150612141565b859293949516906040516352d1902d60e01b815286818981865afa600091816118f0575b506117d35760405162461bcd60e51b8152808901889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b969192939594960361189a57506117e982612141565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2825115801590611892575b611825575b5050505080f35b600080611888956040519561183987611f95565b602787527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c86880152660819985a5b195960ca1b60408801525190845af4903d15610ee4573d610ebe81611fd3565b503880808061181e565b506000611819565b60405162461bcd60e51b8152908101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90918882813d8311611918575b6119078183611fb1565b810103126102175750519038611773565b503d6118fd565b604187634e487b7160e01b6000525260246000fd5b61193d90611f81565b610f8e5785386116f0565b9050346104005761195836611f1b565b6040516331a9108f60e11b815280850183905292936001600160a01b03808616949193909291602081602481895afa8015611df45784918991611dd5575b5016956119a4873314612488565b6119ae82826127c8565b6119b882826126fc565b15611da35781611b1c9187611a628b611aed6040611acb876119d861282d565b62015180906119e8828204612b5f565b508a899492945260a8602052868920858a52602052611a0a878a205493612ec2565b91838311611d9b575b611a21611a2a918404612b5f565b50949093612f51565b938b8a5260a9602052878a20868b52602052878a20549b8c96818c5260ab602052898c20908c526020526003898c208a519d8e611f4f565b8d815490528d602060018301549101528d8b6002830154910152015460608d01528a5260a66020528d888b20908b52602052878a2054948015600014611d4b57505050875260a0602052848720908752602052838620611ac383825461228f565b90555b61229c565b9281850151815260a0602052818120606086015182526020522091825461229c565b905580518c5260a0602052602060408d209101518c52602052611b1560408c2091825461229c565b9055612748565b9085885260aa6020526040882081895260205260408820611b3e83825461228f565b90558460208560975416604051928380926361d027b360e01b82525afa80156107ff5785918a91611d2c575b5060408051636676fbc560e11b81528089018681526001600160a01b03881660208281019190915291999490931692909189918291010381845afa96871561162c578a97611cf8575b508615611cc557873b1561073157604051630852cd8d60e31b81528281018490528a81602481838d5af180156115df57611cb0575b5090818a923b156107405760408051631a4ca37b60e21b81526001600160a01b038816938101938452602084018a90523391840191909152918391839182908490829060600103925af1801561073557611c8c575b5095927f5d431a60d05c2d376ada5a88a66968da29820db1acf8a7ce7b3086c7cc3191cf95928860c0969360405196875260208701526040860152606085015216608083015260a0820152a180f35b611c9c9097969594939297611f81565b611cac5790919293948738611c3d565b8780fd5b611cbd909a91929a611f81565b989038611be8565b60405162461bcd60e51b8152602081840152600c60248201526b7a65726f20616d6f756e742160a01b6044820152606490fd5b9096506020813d602011611d24575b81611d1460209383611fb1565b8101031261073157519538611bb3565b3d9150611d07565b611d45915060203d6020116107ad5761079f8183611fb1565b38611b6a565b9193509150600103611d7d5750508651865260a060205283862060208801518752602052838620611ac382825461228f565b875260a0602052848720908752602052838620611ac382825461228f565b839250611a13565b60405162461bcd60e51b8152602081870152600b60248201526a63616e27742073656c6c2160a81b6044820152606490fd5b611dee915060203d6020116107ad5761079f8183611fb1565b38611996565b6040513d8a823e3d90fd5b8234610217576040366003190112610217576020610242611e1e611f05565b60243590612748565b8234610217576040602091611e3b36611eef565b90825260a1845282822090825283522054604051908152f35b82346102175780600319360112610217576020609c54604051908152f35b82346102175780600319360112610217576020609a54604051908152f35b82346102175780600319360112610217576020609854604051908152f35b82346102175780600319360112610217576020609d54604051908152f35b823461021757806003193601126102175761038d610370620151806110c461282d565b6040906003190112610770576004359060243590565b600435906001600160a01b038216820361077057565b6060906003190112610770576001600160a01b03600435818116810361077057916024359160443590811681036107705790565b6080810190811067ffffffffffffffff821117611f6b57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111611f6b57604052565b6060810190811067ffffffffffffffff821117611f6b57604052565b90601f8019910116810190811067ffffffffffffffff821117611f6b57604052565b67ffffffffffffffff8111611f6b57601f01601f191660200190565b81601f820112156107705780359061200682611fd3565b926120146040519485611fb1565b8284526020838301011161077057816000926020809301838601378301015290565b6020808252825181830181905290939260005b82811061206b57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501612049565b1561208657565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b156120e757565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b803b1561217657600080516020612fb283398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b9192901561223357508151156121e5575090565b3b156121ee5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156122465750805190602001fd5b60405162461bcd60e51b81529081906122629060048301612036565b0390fd5b8181029291811591840414171561227957565b634e487b7160e01b600052601160045260246000fd5b9190820180921161227957565b9190820391821161227957565b60001981146122795760010190565b6097546001600160a01b03166000813b1561021757602481604093845192838092630ceb3b9b60e21b82523360048301525afa801561243f57612430575b5060a2549161230c61230661282d565b84612f51565b91821561241657600019830192831161241c57821561241657805b838110612337575050505060a255565b612411907fb2f0ca0b2a366734800f5e4bf2608f0b4677deb5fbed86b6d191b22c57196bfb6123c161237d97612409612386886123da61238e620151809d8e8704612b5f565b50949096612e02565b9d8e04612b5f565b50818c5260a16020818152948d20828e5285528d8d2054978d528085528d8d20958d529484528c8c20549097919661228f565b858b5260a083528b8b20878c5283528b8b20549061229c565b91848a52815289892090858a525280898920558851938493846040919493926060820195825260208201520152565b0390a16122a9565b612327565b50505050565b634e487b7160e01b81526011600452602490fd5b61243990611f81565b386122f6565b83513d84823e3d90fd5b8115612453570490565b634e487b7160e01b600052601260045260246000fd5b9081602091031261077057516001600160a01b03811681036107705790565b1561248f57565b60405162461bcd60e51b815260206004820152601060248201526f6f6e6c79206974656d206f776e65722160801b6044820152606490fd5b60018060a01b031660005260a56020526040600020906000526020526040600020546124fe609e54916124f861282d565b90612f51565b9080821161250a575090565b905090565b9160009260009260018060a01b038216908160005260a56020526040600020816000526020526040600020548260005260a66020526040600020826000526020526040600020548360005260a76020526040600020836000526020526040600020549360005260a960205260406000208360005260205260406000205490609e54926125a1609a5495609b54986124c7565b95965b8688106125b6575b5050505050505050565b909192939495969899868a11156126a7575b6125d9620151806110c48c86612e87565b5081600093929352609f602052604060002081600052602052604060002054801561269d57868a8e0361266857509161264a61265c9461265093612629612656966126248d8d61229c565b612266565b9160005260a160205260406000209060005260205260406000205490612449565b9061228f565b9b6122a9565b996122a9565b969594939291906125a4565b89600094929394198101116122795761265c94612656948f6126509561264a94612629928f600019010361226657508c612266565b50509a99506125ac565b6126cb9082858c6126e057506126c461271091612624898961229c565b049061228f565b868a10156125c8579961265661265c916122a9565b898d146126f5575b612710916126c491612266565b50866126e8565b9060018060a01b03821660005260a760205260406000208160005260205260406000205490609d548210159283612734575b50505090565b61273f9293506124c7565b1438808061272e565b9061275381836124c7565b91609d5483106127c05782156122795760018060a01b031660005260a6602052604060002090600052602052612710600c6127a461279b604060002054946000190185612266565b609c5490612266565b04048181116127b9576127b69161229c565b90565b5050600090565b505050600090565b60018060a01b031660005260a360205260406000209060005260205260ff60406000205416156127f457565b60405162461bcd60e51b815260206004820152601160248201527037b7363c9039ba30b5b2b2103a37b5b2b760791b6044820152606490fd5b60ae546201518090818102918183041490151715612279576127b6904261228f565b906107b28210610770576112c090818301918212926000928382129283159580158516908716176129e0576004958661289d612898600c9586612891876129f4565b0590612a1f565b612a3b565b0580617d491901908112156001166129cd5760011983018381136001166129a757846128c8856129f4565b0590858202918083058714901517156129ba57906128e591612a06565b61016f90808202918205036129a7579084612901920590612a1f565b94611324809501948512908115169116176129945791612926916128916064946129f4565b0580600302906003820503612981579083612942920590612a06565b9162253d8b19830192831360011661296e57620151809283810293818504149015171561296e57505090565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118452602483fd5b634e487b7160e01b855260118652602485fd5b634e487b7160e01b885260118952602488fd5b634e487b7160e01b895260118a52602489fd5b634e487b7160e01b875260118852602487fd5b634e487b7160e01b85526011600452602485fd5b90600d19820191821360011661227957565b8181039291600013801582851316918412161761227957565b9190916000838201938412911290801582169115161761227957565b906105b5918083029283050361227957565b6107b2811061077057617d4a198301928313600116612279576112c09081810191821291600093848312938415908015861690821617612b4b57612aa160049788612891612898600c9788612891896129f4565b60011983018381136001166129a75784612aba856129f4565b0590858202918083058714901517156129ba5790612ad791612a06565b61016f90808202918205036129a7579084612af3920590612a1f565b94611324809501948512908115169116176129945791612b18916128916064946129f4565b0580600302906003820503612981579083612b34920590612a06565b9162253d8b19830192831360011661296e57505090565b634e487b7160e01b86526011600452602486fd5b62010bd99182820192831291600092838212908015821691151617612d2d576226496501928262253d8c85129112908015821691151617612d19578260021b6004938482058103610aef5762023ab180920591828102908105830361299457600381019085600383129112908015821691151617612994579085612be4920590612a06565b600181016001811285831290801582169115161761299457610fa090808202918205036129945762164b09612c2691059186612c1f84612a3b565b0590612a06565b91601f83019285601f85129112908015821691151617612994578260500292605084058103612d065761098f8094059384810290810585036129cd57906050612c70920590612a06565b94600b840593600281019082600283129112908015821691151617612cf35784600c0290600c82058603612ce05790612ca891612a06565b96603019830192831360011661296e578260640292606484050361296e575050612cdb9291612cd691612a1f565b612a1f565b929190565b634e487b7160e01b835260118952602483fd5b634e487b7160e01b825260118852602482fd5b634e487b7160e01b865260118752602486fd5b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526011600452602483fd5b90600181148015612df8575b8015612dee575b8015612de4575b8015612dda575b8015612dd0575b8015612dc6575b15612d7c575050601f90565b600214612d895750601e90565b60038116159081612db9575b8115612dac575b5015612da757601d90565b601c90565b6101909150061538612d9c565b6064810615159150612d95565b50600c8114612d70565b50600a8114612d69565b5060088114612d62565b5060078114612d5b565b5060058114612d54565b5060038114612d4d565b9062015180612e12818404612b5f565b9190829160018201821161227957612e2f600c918284049061228f565b9106906001820180921161227957612e5993612e4b8383612d41565b809111612e7f575b50612a4d565b8181029080820483149015171561227957612e769184069061228f565b91821061077057565b925038612e53565b9190612ea66201518091612e9c838604612b5f565b939092849361228f565b60001981019190821161227957612e2f600c918284049061228f565b9062015180612ed2818404612b5f565b91908291600c810290808204600c1490151715612279576000199180830190811161227957612f009161228f565b90810190811161227957600c8082049106906001820180921161227957612f2b93612e4b8383612d41565b8181029080820483149015171561227957612f489184069061228f565b91821161077057565b81811161077057612f74612f6a62015180809304612b5f565b5092909304612b5f565b50600c820291808304600c149015171561227957612f919161228f565b600c830292808404600c1490151715612279576127b692611ac69161229c56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220d1a4944eaaee7b7d3ea44a4b19c2a773e6b941712c03a4cc3c6f36a2a36759b364736f6c63430008120033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 371,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 374,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 683,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 752,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 353,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 668,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7240,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "addressBook",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 7242,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "minLockYears",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 7244,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "maxLockYears",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 7246,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "initialMonths",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 7248,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "initialRewardsRate",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 7250,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "yearDeprecationRate",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 7252,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "minMonthsCount",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 7254,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "maxMonthsCount",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 7260,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "earnings",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7266,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "depositsToRemove",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7272,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "deposits",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7274,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "lastUpdatedTimestamp",
        "offset": 0,
        "slot": "162",
        "type": "t_uint256"
      },
      {
        "astId": 7280,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "isStakedToken",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 7286,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "initialTimestamp",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7292,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "startStakingTimestamp",
        "offset": 0,
        "slot": "165",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7298,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "itemsPrice",
        "offset": 0,
        "slot": "166",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7304,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "claimedPeriodsCount",
        "offset": 0,
        "slot": "167",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7310,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "finalTimestamp",
        "offset": 0,
        "slot": "168",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7316,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "remainder",
        "offset": 0,
        "slot": "169",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7322,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "withdrawnRewards",
        "offset": 0,
        "slot": "170",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7338,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "depostitsDate",
        "offset": 0,
        "slot": "171",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(DepositsDate)7331_storage))"
      },
      {
        "astId": 7340,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "lastUpdatedEarningsYear",
        "offset": 0,
        "slot": "172",
        "type": "t_uint256"
      },
      {
        "astId": 7342,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "lastUpdatedEarningsMonth",
        "offset": 0,
        "slot": "173",
        "type": "t_uint256"
      },
      {
        "astId": 8733,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "__addedDays",
        "offset": 0,
        "slot": "174",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(DepositsDate)7331_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct FlexStakingStrategy.DepositsDate))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(DepositsDate)7331_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(DepositsDate)7331_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FlexStakingStrategy.DepositsDate)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositsDate)7331_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DepositsDate)7331_storage": {
        "encoding": "inplace",
        "label": "struct FlexStakingStrategy.DepositsDate",
        "members": [
          {
            "astId": 7324,
            "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
            "label": "finalYear",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7326,
            "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
            "label": "finalMonth",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7328,
            "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
            "label": "prevFinalYear",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7330,
            "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
            "label": "prevFinalMonth",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}