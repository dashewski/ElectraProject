{
  "address": "0x9D3ff4FBfED0D776FD025C3F99d407D8DbaD5Da9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedPeriods",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Sell",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earnings",
          "type": "uint256"
        }
      ],
      "name": "SetEarnings",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "itemOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemsPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startStakingTimetsmap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainder",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposits",
          "type": "uint256"
        }
      ],
      "name": "UpdateDeposits",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressBook",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "canSell",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_withdrawToken",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_monthsCount",
          "type": "uint256"
        }
      ],
      "name": "claimTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimedPeriodsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "year_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "day_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        }
      ],
      "name": "depositsToRemove",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositToRemove",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "depostitsDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "finalYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finalMonth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevFinalYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevFinalMonth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        }
      ],
      "name": "earnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "estimateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewards_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedPeriods_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "estimateSell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "finalTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "getAllExpiredMonths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialMonths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialRewardsRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "initialTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressBook",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minLockYears",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxLockYears",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialMonths",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialRewardsRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yearDeprecationRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isStakedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "itemsPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedEarningsMonth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedEarningsPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "year_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedEarningsYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLockYears",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMonthsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLockYears",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minMonthsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "remainder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_withdrawToken",
          "type": "address"
        }
      ],
      "name": "sell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_year",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_month",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_formatedEarning",
          "type": "uint256"
        }
      ],
      "name": "setEarnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "startStakingTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "timestampPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "year_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "day_",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "totalWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yearDeprecationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7689657aca681f6ad3a83aa01ff54776d79f87850d40a37d28857543b6f15716",
  "receipt": {
    "to": null,
    "from": "0x2458B3c26F4E904Af6Ff26f09FA23AcFE4C90AD8",
    "contractAddress": "0x9D3ff4FBfED0D776FD025C3F99d407D8DbaD5Da9",
    "transactionIndex": 76,
    "gasUsed": "2875667",
    "logsBloom": "0x
    "blockHash": "0xddc22485fd2db4f329c3b84876e9bbb3a5873489bfd131056e1100a1b7bdf33c",
    "transactionHash": "0x7689657aca681f6ad3a83aa01ff54776d79f87850d40a37d28857543b6f15716",
    "logs": [
      {
        "transactionIndex": 76,
        "blockNumber": 35205375,
        "transactionHash": "0x7689657aca681f6ad3a83aa01ff54776d79f87850d40a37d28857543b6f15716",
        "address": "0x9D3ff4FBfED0D776FD025C3F99d407D8DbaD5Da9",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 112,
        "blockHash": "0xddc22485fd2db4f329c3b84876e9bbb3a5873489bfd131056e1100a1b7bdf33c"
      }
    ],
    "blockNumber": 35205375,
    "cumulativeGasUsed": "9384790",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "651dbab8f727aed77f00dddc4300e6b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedPeriods\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"}],\"name\":\"SetEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemsPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startStakingTimetsmap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"}],\"name\":\"UpdateDeposits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"canSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawToken\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_monthsCount\",\"type\":\"uint256\"}],\"name\":\"claimTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimedPeriodsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"year_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"}],\"name\":\"depositsToRemove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositToRemove\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depostitsDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevFinalYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevFinalMonth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"}],\"name\":\"earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"estimateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedPeriods_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"estimateSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"finalTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getAllExpiredMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialRewardsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"initialTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressBook\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minLockYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLockYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMonths\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialRewardsRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yearDeprecationRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isStakedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"itemsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedEarningsMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedEarningsPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"year_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedEarningsYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockYears\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMonthsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockYears\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMonthsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"remainder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawToken\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_formatedEarning\",\"type\":\"uint256\"}],\"name\":\"setEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"startStakingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"timestampPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"year_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearDeprecationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"estimateSell(address,uint256)\":{\"details\":\"May return zero in collections where the cost of equipment is not returned\"},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"setEarnings(uint256,uint256,uint256)\":{\"details\":\"Awards must be stated for each period; if there was no income, you must indicate at least $1.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setEarnings(uint256,uint256,uint256)\":{\"notice\":\"Protocol owner sets the income for the period\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/stakings/FlexStakingStrategy.sol\":\"FlexStakingStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract MulticallUpgradeable is Initializable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = AddressUpgradeable.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9793fff31f1864ea9835c37b305e6f1dd0585c20df215a0d43b8ac13d180127a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/core/stakings/FlexStakingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nimport { ITreasury } from \\\"../../interfaces/ITreasury.sol\\\";\\r\\nimport { IAddressBook } from \\\"../../interfaces/IAddressBook.sol\\\";\\r\\nimport { IItem } from \\\"../../interfaces/IItem.sol\\\";\\r\\nimport { IStakingStrategy } from \\\"../../interfaces/IStakingStrategy.sol\\\";\\r\\nimport { DateTimeLib } from \\\"../../utils/DateTimeLib.sol\\\";\\r\\nimport { MulticallUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\r\\n\\r\\ncontract FlexStakingStrategy is\\r\\n    IStakingStrategy,\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    UUPSUpgradeable,\\r\\n    MulticallUpgradeable\\r\\n{\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- STORAGE ----------------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    address public addressBook;\\r\\n    uint256 public minLockYears;\\r\\n    uint256 public maxLockYears;\\r\\n    uint256 public initialMonths;\\r\\n    uint256 public initialRewardsRate;\\r\\n    uint256 public yearDeprecationRate;\\r\\n    uint256 public minMonthsCount;\\r\\n    uint256 public maxMonthsCount;\\r\\n\\r\\n    mapping(uint256 year => mapping(uint256 month => uint256)) public earnings;\\r\\n    mapping(uint256 year => mapping(uint256 month => uint256 depositToRemove))\\r\\n        public depositsToRemove;\\r\\n    mapping(uint256 year => mapping(uint256 month => uint256 deposit)) public deposits;\\r\\n    uint256 public lastUpdatedTimestamp;\\r\\n\\r\\n    mapping(address item => mapping(uint256 tokenId => bool)) public isStakedToken;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public initialTimestamp;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public startStakingTimestamp;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public itemsPrice;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public claimedPeriodsCount;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public finalTimestamp;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public remainder;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public totalWithdrawn;\\r\\n\\r\\n    struct DepositsDate {\\r\\n        uint256 finalYear;\\r\\n        uint256 finalMonth;\\r\\n        uint256 prevFinalYear;\\r\\n        uint256 prevFinalMonth;\\r\\n    }\\r\\n    mapping(address item => mapping(uint256 tokenId => DepositsDate)) public depostitsDate;\\r\\n\\r\\n    uint256 public lastUpdatedEarningsYear;\\r\\n    uint256 public lastUpdatedEarningsMonth;\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- EVENTS  ----------------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    event UpdateDeposits(uint256 year, uint256 month, uint256 deposits);\\r\\n    event SetEarnings(uint256 year, uint256 month, uint256 earnings);\\r\\n    event Stake(\\r\\n        address itemAddress,\\r\\n        uint256 itemId,\\r\\n        address itemOwner,\\r\\n        uint256 itemsPrice,\\r\\n        uint256 initialTimestamp,\\r\\n        uint256 startStakingTimetsmap,\\r\\n        uint256 finalTimestamp,\\r\\n        uint256 remainder\\r\\n    );\\r\\n    event Claim(\\r\\n        address itemAddress,\\r\\n        uint256 itemId,\\r\\n        address itemOwner,\\r\\n        uint256 rewards,\\r\\n        uint256 claimedPeriods,\\r\\n        address withdrawToken,\\r\\n        uint256 withdrawTokenAmount\\r\\n    );\\r\\n    event Sell(\\r\\n        address itemAddress,\\r\\n        uint256 itemId,\\r\\n        address itemOwner,\\r\\n        uint256 sellPrice,\\r\\n        address withdrawToken,\\r\\n        uint256 withdrawTokenAmount\\r\\n    );\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- DEPLOY & UPGRADE  ------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _addressBook,\\r\\n        uint256 _minLockYears,\\r\\n        uint256 _maxLockYears,\\r\\n        uint256 _initialMonths,\\r\\n        uint256 _initialRewardsRate,\\r\\n        uint256 _yearDeprecationRate\\r\\n    ) public initializer {\\r\\n        require(_minLockYears > 0, \\\"_minLockYears cannot be zero\\\");\\r\\n        require(_maxLockYears > _minLockYears, \\\"_maxLockYears must be greater than _minLockYears!\\\");\\r\\n        require(_initialMonths > 0, \\\"_initialMonths cannot be zero\\\");\\r\\n        require(_initialRewardsRate > 0, \\\"_initialRewardsRate cannot be zero\\\");\\r\\n        require(_addressBook != address(0), \\\"_addressBook!\\\");\\r\\n        addressBook = _addressBook;\\r\\n        minLockYears = _minLockYears;\\r\\n        maxLockYears = _maxLockYears;\\r\\n        initialMonths = _initialMonths;\\r\\n        initialRewardsRate = _initialRewardsRate;\\r\\n        yearDeprecationRate = _yearDeprecationRate;\\r\\n\\r\\n        (uint256 initialYear, uint256 initialMonth, ) = DateTimeLib.timestampToDate(\\r\\n            DateTimeLib.subMonths(_blockTimestamp(), 1)\\r\\n        );\\r\\n        lastUpdatedTimestamp = DateTimeLib.timestampFromDate(initialYear, initialMonth, 1);\\r\\n        lastUpdatedEarningsYear = initialYear;\\r\\n        lastUpdatedEarningsMonth = initialMonth;\\r\\n\\r\\n        maxMonthsCount = 12 * _maxLockYears + 1;\\r\\n        minMonthsCount = 12 * _minLockYears + 1;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal view override {\\r\\n        IAddressBook(addressBook).enforceIsProductOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // -----  PRODUCT OWNER ACTIONS  ------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    /// @notice Protocol owner sets the income for the period\\r\\n    /// @dev Awards must be stated for each period; if there was no income, you must indicate at least $1.\\r\\n    function setEarnings(uint256 _year, uint256 _month, uint256 _formatedEarning) external {\\r\\n        IAddressBook(addressBook).enforceIsProductOwner(msg.sender);\\r\\n        require(_formatedEarning > 0, \\\"earnings cannot be zero!\\\");\\r\\n\\r\\n        uint256 earningsTimestamp = DateTimeLib.timestampFromDate(_year, _month, 1);\\r\\n        require(\\r\\n            earningsTimestamp <= lastUpdatedTimestamp,\\r\\n            \\\"cannot set earnings for an unexpired period!\\\"\\r\\n        );\\r\\n        uint256 usdDecimals = ITreasury(IAddressBook(addressBook).treasury()).USD_DECIMALS();\\r\\n        uint256 _earnings = _formatedEarning * (10 ** usdDecimals);\\r\\n        earnings[_year][_month] = _earnings;\\r\\n\\r\\n        lastUpdatedEarningsYear = _year;\\r\\n        lastUpdatedEarningsMonth = _month;\\r\\n\\r\\n        emit SetEarnings(_year, _month, _earnings);\\r\\n    }\\r\\n\\r\\n    function updateDeposits() public {\\r\\n        IAddressBook(addressBook).enforceIsProductOwner(msg.sender);\\r\\n\\r\\n        uint256 _lastUpdatedTimestamp = lastUpdatedTimestamp;\\r\\n        uint256 diffMonths = DateTimeLib.diffMonths(_lastUpdatedTimestamp, _blockTimestamp());\\r\\n        if (diffMonths == 0) return;\\r\\n        uint256 monthsToUpdate = diffMonths - 1;\\r\\n        if (monthsToUpdate == 0) return;\\r\\n        // The variable i is initialized to 0 by default\\r\\n        for (uint256 i; i < monthsToUpdate; ++i) {\\r\\n            (uint256 prevYear, uint256 prevMonth, ) = DateTimeLib.timestampToDate(\\r\\n                _lastUpdatedTimestamp\\r\\n            );\\r\\n            _lastUpdatedTimestamp = DateTimeLib.addMonths(_lastUpdatedTimestamp, 1);\\r\\n            (uint256 year, uint256 month, ) = DateTimeLib.timestampToDate(_lastUpdatedTimestamp);\\r\\n            uint256 newDeposits = deposits[year][month] +\\r\\n                deposits[prevYear][prevMonth] -\\r\\n                depositsToRemove[year][month];\\r\\n            deposits[year][month] = newDeposits;\\r\\n\\r\\n            emit UpdateDeposits(year, month, newDeposits);\\r\\n        }\\r\\n        lastUpdatedTimestamp = _lastUpdatedTimestamp;\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // -----  PROTOCOL ACTIONS  -----------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    function stake(address _itemAddress, uint256 _itemId, bytes memory) external {\\r\\n        IAddressBook(addressBook).enforceIsItemContract(msg.sender);\\r\\n\\r\\n        // Initial data\\r\\n        isStakedToken[_itemAddress][_itemId] = true;\\r\\n        uint256 _initialTimestamp = _blockTimestamp();\\r\\n        initialTimestamp[_itemAddress][_itemId] = _initialTimestamp;\\r\\n        (uint256 year, uint256 month, uint256 initialDay) = DateTimeLib.timestampToDate(\\r\\n            _initialTimestamp\\r\\n        );\\r\\n\\r\\n        uint256 _startStakingTimestamp = DateTimeLib.timestampFromDate(year, month, 1);\\r\\n        startStakingTimestamp[_itemAddress][_itemId] = _startStakingTimestamp;\\r\\n\\r\\n        uint256 _itemsPrice = IItem(_itemAddress).price();\\r\\n        itemsPrice[_itemAddress][_itemId] = _itemsPrice;\\r\\n\\r\\n        // Remainder\\r\\n        uint256 daysInStartMonth = DateTimeLib.getDaysInMonth(_startStakingTimestamp);\\r\\n        uint256 ratio = (1e18 * initialDay) / (daysInStartMonth + 1); // Division occurs after multiplication\\r\\n        uint256 _remainder = (_itemsPrice * ratio) / 1e18; // Division occurs after multiplication\\r\\n        remainder[_itemAddress][_itemId] = _remainder;\\r\\n        // Final date\\r\\n        uint256 _finalTimestamp = DateTimeLib.addMonths(_startStakingTimestamp, maxMonthsCount);\\r\\n        finalTimestamp[_itemAddress][_itemId] = _finalTimestamp;\\r\\n        // Earnings date\\r\\n        uint256 earningsTimestamp = DateTimeLib.addMonths(_startStakingTimestamp, initialMonths);\\r\\n        (uint256 earningsYear, uint256 earningsMonth, ) = DateTimeLib.timestampToDate(\\r\\n            earningsTimestamp\\r\\n        );\\r\\n        // Next earnings date\\r\\n        (uint256 nextEarningsYear, uint256 nextEarningsMonth, ) = DateTimeLib.timestampToDate(\\r\\n            DateTimeLib.addMonths(earningsTimestamp, 1)\\r\\n        );\\r\\n        // Prev final date\\r\\n        (uint256 prevFinalYear, uint256 prevFinalMonth, ) = DateTimeLib.timestampToDate(\\r\\n            DateTimeLib.subMonths(_finalTimestamp, 1)\\r\\n        );\\r\\n        // Final date\\r\\n        (uint256 finalYear, uint256 finalMonth, ) = DateTimeLib.timestampToDate(_finalTimestamp);\\r\\n\\r\\n        // Set deposits\\r\\n        deposits[earningsYear][earningsMonth] += _itemsPrice - _remainder;\\r\\n        deposits[nextEarningsYear][nextEarningsMonth] += _remainder;\\r\\n        // Set deposits to remove\\r\\n        depositsToRemove[prevFinalYear][prevFinalMonth] += _itemsPrice - _remainder;\\r\\n        depositsToRemove[finalYear][finalMonth] += _remainder;\\r\\n        depostitsDate[_itemAddress][_itemId] = DepositsDate(\\r\\n            finalYear,\\r\\n            finalMonth,\\r\\n            prevFinalYear,\\r\\n            prevFinalMonth\\r\\n        );\\r\\n\\r\\n        address _itemOwner = IERC721(_itemAddress).ownerOf(_itemId);\\r\\n\\r\\n        emit Stake(\\r\\n            _itemAddress,\\r\\n            _itemId,\\r\\n            _itemOwner,\\r\\n            _itemsPrice,\\r\\n            _initialTimestamp,\\r\\n            _startStakingTimestamp,\\r\\n            _finalTimestamp,\\r\\n            _remainder\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- USER ACTIONS  ----------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    function claim(address _itemAddress, uint256 _itemId, address _withdrawToken) external {\\r\\n        _enforceIsItemOwner(_itemAddress, _itemId);\\r\\n        _enforceIsStakedToken(_itemAddress, _itemId);\\r\\n        address _itemOwner = msg.sender;\\r\\n\\r\\n        (uint256 rewards, uint256 claimedPeriods) = estimateRewards(_itemAddress, _itemId);\\r\\n        require(rewards > 0, \\\"not has rewards!\\\");\\r\\n\\r\\n        totalWithdrawn[_itemAddress][_itemId] += rewards;\\r\\n        claimedPeriodsCount[_itemAddress][_itemId] += claimedPeriods;\\r\\n\\r\\n        // Withdraw\\r\\n        address _treasury = IAddressBook(addressBook).treasury();\\r\\n        uint256 withdrawTokenAmount = ITreasury(_treasury).usdAmountToToken(\\r\\n            rewards,\\r\\n            _withdrawToken\\r\\n        );\\r\\n        ITreasury(_treasury).withdraw(_withdrawToken, withdrawTokenAmount, msg.sender);\\r\\n\\r\\n        emit Claim(\\r\\n            _itemAddress,\\r\\n            _itemId,\\r\\n            _itemOwner,\\r\\n            rewards,\\r\\n            claimedPeriods,\\r\\n            _withdrawToken,\\r\\n            withdrawTokenAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function sell(address _itemAddress, uint256 _itemId, address _withdrawToken) external {\\r\\n        _enforceIsItemOwner(_itemAddress, _itemId);\\r\\n        _enforceIsStakedToken(_itemAddress, _itemId);\\r\\n        address _itemOwner = msg.sender;\\r\\n\\r\\n        require(canSell(_itemAddress, _itemId), \\\"can't sell!\\\");\\r\\n\\r\\n        uint256 currentTimestamp = _blockTimestamp();\\r\\n        (uint256 currentYear, uint256 currentMonth, ) = DateTimeLib.timestampToDate(\\r\\n            currentTimestamp\\r\\n        );\\r\\n\\r\\n        uint256 _finalTimestamp = finalTimestamp[_itemAddress][_itemId];\\r\\n\\r\\n        uint256 sellTimestamp = DateTimeLib.subMonths(currentTimestamp, 1);\\r\\n        if (sellTimestamp > _finalTimestamp) sellTimestamp = _finalTimestamp;\\r\\n        (uint256 sellYear, uint256 sellMonth, ) = DateTimeLib.timestampToDate(sellTimestamp);\\r\\n\\r\\n        uint256 diffMonths = DateTimeLib.diffMonths(sellTimestamp, _finalTimestamp);\\r\\n\\r\\n        uint256 _remainder = remainder[_itemAddress][_itemId];\\r\\n        DepositsDate memory d = depostitsDate[_itemAddress][_itemId];\\r\\n        uint256 _itemsPrice = itemsPrice[_itemAddress][_itemId];\\r\\n\\r\\n        if (diffMonths == 0) {\\r\\n            // final\\r\\n            depositsToRemove[sellYear][sellMonth] += _remainder;\\r\\n        } else if (diffMonths == 1) {\\r\\n            // prev final\\r\\n            depositsToRemove[d.finalYear][d.finalMonth] += _itemsPrice;\\r\\n        } else {\\r\\n            // early\\r\\n            depositsToRemove[currentYear][currentMonth] += _itemsPrice;\\r\\n        }\\r\\n        depositsToRemove[d.prevFinalYear][d.prevFinalMonth] -= _itemsPrice - _remainder;\\r\\n        depositsToRemove[d.finalYear][d.finalMonth] -= _remainder;\\r\\n\\r\\n        uint256 sellPrice = estimateSell(_itemAddress, _itemId);\\r\\n\\r\\n        totalWithdrawn[_itemAddress][_itemId] += sellPrice;\\r\\n\\r\\n        address _treasury = IAddressBook(addressBook).treasury();\\r\\n        uint256 withdrawTokenAmount = ITreasury(_treasury).usdAmountToToken(\\r\\n            sellPrice,\\r\\n            _withdrawToken\\r\\n        );\\r\\n        require(withdrawTokenAmount > 0, \\\"zero amount!\\\");\\r\\n\\r\\n        IItem(_itemAddress).burn(_itemId);\\r\\n        ITreasury(_treasury).withdraw(_withdrawToken, withdrawTokenAmount, msg.sender);\\r\\n\\r\\n        emit Sell(\\r\\n            _itemAddress,\\r\\n            _itemId,\\r\\n            _itemOwner,\\r\\n            sellPrice,\\r\\n            _withdrawToken,\\r\\n            withdrawTokenAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- VIEW  ------------------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    function stakingType() external pure returns (string memory) {\\r\\n        return \\\"flex\\\";\\r\\n    }\\r\\n\\r\\n    function currentPeriod() external view returns (uint256 year_, uint256 month_, uint256 day_) {\\r\\n        return timestampPeriod(_blockTimestamp());\\r\\n    }\\r\\n\\r\\n    function timestampPeriod(\\r\\n        uint256 _timestamp\\r\\n    ) public pure returns (uint256 year_, uint256 month_, uint256 day_) {\\r\\n        (year_, month_, day_) = DateTimeLib.timestampToDate(_timestamp);\\r\\n    }\\r\\n\\r\\n    function claimTimestamp(\\r\\n        address _itemAddress,\\r\\n        uint256 _itemId,\\r\\n        uint256 _monthsCount\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 _finalTimestamp = finalTimestamp[_itemAddress][_itemId];\\r\\n        uint256 _startStakingTimestamp = startStakingTimestamp[_itemAddress][_itemId];\\r\\n        uint256 _nextClaimTimestamp = DateTimeLib.addMonths(_startStakingTimestamp, _monthsCount);\\r\\n        if (_nextClaimTimestamp > _finalTimestamp) _nextClaimTimestamp = _finalTimestamp;\\r\\n        return _nextClaimTimestamp;\\r\\n    }\\r\\n\\r\\n    function getAllExpiredMonths(\\r\\n        address _itemAddress,\\r\\n        uint256 _itemId\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 _startStakingTimestamp = startStakingTimestamp[_itemAddress][_itemId];\\r\\n        uint256 _maxMonthsCount = maxMonthsCount;\\r\\n        uint256 allExpiredMonths = DateTimeLib.diffMonths(\\r\\n            _startStakingTimestamp,\\r\\n            _blockTimestamp()\\r\\n        );\\r\\n        if (allExpiredMonths > _maxMonthsCount) allExpiredMonths = _maxMonthsCount;\\r\\n        return allExpiredMonths;\\r\\n    }\\r\\n\\r\\n    function estimateRewards(\\r\\n        address _itemAddress,\\r\\n        uint256 _itemId\\r\\n    ) public view returns (uint256 rewards_, uint256 claimedPeriods_) {\\r\\n        uint256 _startStakingTimestamp = startStakingTimestamp[_itemAddress][_itemId];\\r\\n        uint256 _itemsPrice = itemsPrice[_itemAddress][_itemId];\\r\\n        uint256 _claimedPeriodsCount = claimedPeriodsCount[_itemAddress][_itemId];\\r\\n        uint256 _remainder = remainder[_itemAddress][_itemId];\\r\\n        uint256 _maxMonthsCount = maxMonthsCount;\\r\\n        uint256 _initialMonths = initialMonths;\\r\\n        uint256 _initialRewardsRate = initialRewardsRate;\\r\\n\\r\\n        uint256 allExpiredMonths = getAllExpiredMonths(_itemAddress, _itemId);\\r\\n\\r\\n        for (uint256 i = _claimedPeriodsCount; i < allExpiredMonths; ++i) {\\r\\n            if (i <= _initialMonths) {\\r\\n                uint256 initialItemsPrice = _itemsPrice;\\r\\n                if (i == 0) {\\r\\n                    initialItemsPrice = _itemsPrice - _remainder;\\r\\n                } else if (i == _initialMonths) {\\r\\n                    initialItemsPrice = _remainder;\\r\\n                }\\r\\n                rewards_ += (initialItemsPrice * _initialRewardsRate) / 10000;\\r\\n                if (i < _initialMonths) {\\r\\n                    ++claimedPeriods_;\\r\\n                    continue;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            (uint256 year, uint256 month, ) = DateTimeLib.timestampToDate(\\r\\n                DateTimeLib.addMonths(_startStakingTimestamp, i)\\r\\n            );\\r\\n\\r\\n            // If rewards are not indicated for a period, then there are no further ones either.\\r\\n            uint256 _earnings = earnings[year][month];\\r\\n            if (_earnings == 0) {\\r\\n                if (claimedPeriods_ == 0) rewards_ = 0;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            uint256 earningsItemsPrice = _itemsPrice;\\r\\n            if (i == _initialMonths) {\\r\\n                earningsItemsPrice = _itemsPrice - _remainder;\\r\\n            } else if (i == _maxMonthsCount - 1) {\\r\\n                earningsItemsPrice = _remainder;\\r\\n            }\\r\\n\\r\\n            rewards_ += (earningsItemsPrice * _earnings) / deposits[year][month];\\r\\n            ++claimedPeriods_;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function canSell(address _itemAddress, uint256 _itemId) public view returns (bool) {\\r\\n        uint256 _claimedPeriodsCount = claimedPeriodsCount[_itemAddress][_itemId];\\r\\n        return\\r\\n            _claimedPeriodsCount >= minMonthsCount &&\\r\\n            _claimedPeriodsCount == getAllExpiredMonths(_itemAddress, _itemId);\\r\\n    }\\r\\n\\r\\n    /// @dev May return zero in collections where the cost of equipment is not returned\\r\\n    function estimateSell(address _itemAddress, uint256 _itemId) public view returns (uint256) {\\r\\n        uint256 allExpiredMonths = getAllExpiredMonths(_itemAddress, _itemId);\\r\\n        if (allExpiredMonths < minMonthsCount) return 0;\\r\\n        --allExpiredMonths; // sub additional splited month\\r\\n\\r\\n        uint256 _itemsPrice = itemsPrice[_itemAddress][_itemId];\\r\\n        uint256 deprecation = (_itemsPrice * allExpiredMonths * yearDeprecationRate) / 12 / 10000;\\r\\n\\r\\n        if (deprecation > _itemsPrice) return 0;\\r\\n        return _itemsPrice - deprecation;\\r\\n    }\\r\\n\\r\\n    function lastUpdatedEarningsPeriod() external view returns (uint256 year_, uint256 month_) {\\r\\n        year_ = lastUpdatedEarningsYear;\\r\\n        month_ = lastUpdatedEarningsMonth;\\r\\n    }\\r\\n\\r\\n    function _enforceIsStakedToken(address _itemAddress, uint256 _itemId) internal view {\\r\\n        require(isStakedToken[_itemAddress][_itemId], \\\"only staked token\\\");\\r\\n    }\\r\\n\\r\\n    function _enforceIsItemOwner(address _itemAddress, uint256 _itemId) internal view {\\r\\n        require(msg.sender == IERC721(_itemAddress).ownerOf(_itemId), \\\"only item owner!\\\");\\r\\n    }\\r\\n\\r\\n    function _blockTimestamp() internal view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x226e951627cd69fbd5b156cb0522857dd7df4a306bc45c1dc7ea2189d1797ad6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAddressBook.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IAddressBook {\\r\\n    function treasury() external view returns (address);\\r\\n\\r\\n    function enforceIsItemContract(address _contract) external view;\\r\\n\\r\\n    function enforceIsProductOwner(address _account) external view;\\r\\n    \\r\\n    function productOwner() external view returns (address);\\r\\n\\r\\n    function items(address _item) external view returns (bool);\\r\\n\\r\\n    function stakingStrategies(address _stakingStrategy) external view returns (bool);\\r\\n\\r\\n    function enforceIsStakingStrategyContract(address _contract) external view;\\r\\n}\\r\\n\",\"keccak256\":\"0x3eb9bba9daec6efa3ac44ea3a0005b46f3443d8e9a4dda16b4b2917b22087025\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IItem.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IItem {\\r\\n    function burn(uint256 _tokenId) external;\\r\\n\\r\\n    function price() external view returns (uint256);\\r\\n\\r\\n    function maxSupply() external returns (uint256);\\r\\n\\r\\n    function totalMintedAmount() external returns (uint256);\\r\\n\\r\\n    function tokenStakingStrategy(uint256 _tokenId) external returns (address);\\r\\n\\r\\n    function mint(address _stakingStrategy, address _payToken, bytes memory _payload) external;\\r\\n\\r\\n    function stopSell() external;\\r\\n\\r\\n    function setNewMaxSupply(uint256 _maxSupply) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1188c4907579677274648b4bb97a3b12d8730b676dca6b57b47ba237d2b43761\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IStakingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IStakingStrategy {\\r\\n    function stake(address _itemAddress, uint256 _itemId, bytes memory _payload) external;\\r\\n}\",\"keccak256\":\"0x2e53f5319fb3596800810274c35761f8d9ee08e5a2753630873fd6efc637e597\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface ITreasury {\\r\\n    function enforceIsSupportedToken(address _token) external view;\\r\\n\\r\\n    function usdAmountToToken(uint256 _usdAmount, address _token) external view returns (uint256);\\r\\n\\r\\n    function withdraw(address _token, uint256 _amount, address _recipient) external;\\r\\n\\r\\n    function USD_DECIMALS() external view returns(uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x51a2b0184076b818f345351e4d9e210787d6a7a6fd405f0b67720bbc7b82281a\",\"license\":\"UNLICENSED\"},\"contracts/utils/DateTimeLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary DateTimeLib {\\r\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\r\\n    uint constant SECONDS_PER_MINUTE = 60;\\r\\n    int constant OFFSET19700101 = 2440588;\\r\\n\\r\\n    uint constant DOW_MON = 1;\\r\\n    uint constant DOW_TUE = 2;\\r\\n    uint constant DOW_WED = 3;\\r\\n    uint constant DOW_THU = 4;\\r\\n    uint constant DOW_FRI = 5;\\r\\n    uint constant DOW_SAT = 6;\\r\\n    uint constant DOW_SUN = 7;\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\r\\n    // the date conversion algorithm from\\r\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\r\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // days = day\\r\\n    //      - 32075\\r\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\r\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\r\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\r\\n    //      - offset\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\r\\n        require(year >= 1970);\\r\\n        int _year = int(year);\\r\\n        int _month = int(month);\\r\\n        int _day = int(day);\\r\\n\\r\\n        int __days = _day -\\r\\n            32075 +\\r\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\r\\n            4 +\\r\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\r\\n            12 -\\r\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\r\\n            4 -\\r\\n            OFFSET19700101;\\r\\n\\r\\n        _days = uint(__days);\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\r\\n    // the date conversion algorithm from\\r\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\r\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // int L = days + 68569 + offset\\r\\n    // int N = 4 * L / 146097\\r\\n    // L = L - (146097 * N + 3) / 4\\r\\n    // year = 4000 * (L + 1) / 1461001\\r\\n    // L = L - 1461 * year / 4 + 31\\r\\n    // month = 80 * L / 2447\\r\\n    // dd = L - 2447 * month / 80\\r\\n    // L = month / 11\\r\\n    // month = month + 2 - 12 * L\\r\\n    // year = 100 * (N - 49) + year + L\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\r\\n        int __days = int(_days);\\r\\n\\r\\n        int L = __days + 68569 + OFFSET19700101;\\r\\n        int N = (4 * L) / 146097;\\r\\n        L = L - (146097 * N + 3) / 4;\\r\\n        int _year = (4000 * (L + 1)) / 1461001;\\r\\n        L = L - (1461 * _year) / 4 + 31;\\r\\n        int _month = (80 * L) / 2447;\\r\\n        int _day = L - (2447 * _month) / 80;\\r\\n        L = _month / 11;\\r\\n        _month = _month + 2 - 12 * L;\\r\\n        _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n        year = uint(_year);\\r\\n        month = uint(_month);\\r\\n        day = uint(_day);\\r\\n    }\\r\\n\\r\\n    function timestampFromDate(\\r\\n        uint year,\\r\\n        uint month,\\r\\n        uint day\\r\\n    ) internal pure returns (uint timestamp) {\\r\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\r\\n    }\\r\\n\\r\\n    function timestampFromDateTime(\\r\\n        uint year,\\r\\n        uint month,\\r\\n        uint day,\\r\\n        uint hour,\\r\\n        uint minute,\\r\\n        uint second\\r\\n    ) internal pure returns (uint timestamp) {\\r\\n        timestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            hour *\\r\\n            SECONDS_PER_HOUR +\\r\\n            minute *\\r\\n            SECONDS_PER_MINUTE +\\r\\n            second;\\r\\n    }\\r\\n\\r\\n    function timestampToDate(\\r\\n        uint timestamp\\r\\n    ) internal pure returns (uint year, uint month, uint day) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function timestampToDateTime(\\r\\n        uint timestamp\\r\\n    ) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        uint secs = timestamp % SECONDS_PER_DAY;\\r\\n        hour = secs / SECONDS_PER_HOUR;\\r\\n        secs = secs % SECONDS_PER_HOUR;\\r\\n        minute = secs / SECONDS_PER_MINUTE;\\r\\n        second = secs % SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\r\\n        if (year >= 1970 && month > 0 && month <= 12) {\\r\\n            uint daysInMonth = _getDaysInMonth(year, month);\\r\\n            if (day > 0 && day <= daysInMonth) {\\r\\n                valid = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isValidDateTime(\\r\\n        uint year,\\r\\n        uint month,\\r\\n        uint day,\\r\\n        uint hour,\\r\\n        uint minute,\\r\\n        uint second\\r\\n    ) internal pure returns (bool valid) {\\r\\n        if (isValidDate(year, month, day)) {\\r\\n            if (hour < 24 && minute < 60 && second < 60) {\\r\\n                valid = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\r\\n        (uint year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        leapYear = _isLeapYear(year);\\r\\n    }\\r\\n\\r\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\r\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\r\\n    }\\r\\n\\r\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\r\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\r\\n    }\\r\\n\\r\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\r\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\r\\n    }\\r\\n\\r\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\r\\n        (uint year, uint month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        daysInMonth = _getDaysInMonth(year, month);\\r\\n    }\\r\\n\\r\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\r\\n        if (\\r\\n            month == 1 ||\\r\\n            month == 3 ||\\r\\n            month == 5 ||\\r\\n            month == 7 ||\\r\\n            month == 8 ||\\r\\n            month == 10 ||\\r\\n            month == 12\\r\\n        ) {\\r\\n            daysInMonth = 31;\\r\\n        } else if (month != 2) {\\r\\n            daysInMonth = 30;\\r\\n        } else {\\r\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // 1 = Monday, 7 = Sunday\\r\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\r\\n        uint _days = timestamp / SECONDS_PER_DAY;\\r\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\r\\n    }\\r\\n\\r\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\r\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\r\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\r\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\r\\n        uint secs = timestamp % SECONDS_PER_DAY;\\r\\n        hour = secs / SECONDS_PER_HOUR;\\r\\n    }\\r\\n\\r\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\r\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\r\\n        minute = secs / SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\r\\n        second = timestamp % SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        year += _years;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            (timestamp % SECONDS_PER_DAY);\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        month += _months;\\r\\n        year += (month - 1) / 12;\\r\\n        month = ((month - 1) % 12) + 1;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            (timestamp % SECONDS_PER_DAY);\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _seconds;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        year -= _years;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            (timestamp % SECONDS_PER_DAY);\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\r\\n        year = yearMonth / 12;\\r\\n        month = (yearMonth % 12) + 1;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            (timestamp % SECONDS_PER_DAY);\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _seconds;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        (uint fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\r\\n        (uint toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\r\\n        _years = toYear - fromYear;\\r\\n    }\\r\\n\\r\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        (uint fromYear, uint fromMonth, ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\r\\n        (uint toYear, uint toMonth, ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\r\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\r\\n    }\\r\\n\\r\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\r\\n    }\\r\\n\\r\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\r\\n    }\\r\\n\\r\\n    function diffMinutes(\\r\\n        uint fromTimestamp,\\r\\n        uint toTimestamp\\r\\n    ) internal pure returns (uint _minutes) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function diffSeconds(\\r\\n        uint fromTimestamp,\\r\\n        uint toTimestamp\\r\\n    ) internal pure returns (uint _seconds) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _seconds = toTimestamp - fromTimestamp;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9565c27da60a87dd693dc2798ad1cd0f5c13039e25ddb4a52941ac3aa89b0a3c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100dd57306080526000549060ff8260081c1661008b575060ff80821603610050575b60405161328f9081620000e38239608051818181610d5201528181610e4101526118f70152f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610029565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe608060405260048036101561001357600080fd5b600090813560e01c90816306040618146120365781631421857414612018578163254d8a1214611ffa57816328d5708e14611fdc57816328eac12314611fbe5781632bd4978014611f915781632e6155c714611f695781633540c91914611b005781633659cfe6146118d05781633e12170f146114bd5781633f315ab71461147a57816345ff4c80146111175781634d29565e146110f25781634d6f3824146110865781634f1ef28614610e0257816352d1902d14610d3e5781635d34893b14610ad45781636924ac9514610aa75781636e675dbf14610a405781637311215914610a2257816377c830ee146109f5578163819f8f11146109c15781638a9e5576146109a35781639a05d060146109605781639af6bdb3146109425781639e96a260146106cc578163a3ad309a14610689578163ac9650d814610504578163b1b0db13146104c1578163b99c5a141461047e578163bec03dd11461043b578163c175b3d11461041f578163c76659a1146103ed578163d7dad7c3146103cf578163de6c7fd214610386578163e44be58014610356578163e544b2e21461031157508063ec78c4c3146102f3578063f1dfa8671461027b578063f23d30df14610238578063f5887cdd1461020f5763fbaf894c146101ef57600080fd5b3461020c578060031936011261020c57602060d454604051908152f35b80fd5b503461020c578060031936011261020c5760c9546040516001600160a01b039091168152602090f35b503461020c57604036600319011261020c576020906040906001600160a01b0361026061206e565b16815260db8352818120602435825283522054604051908152f35b503461020c57606036600319011261020c576020906102d961029b61206e565b6001600160a01b031680835260da845260408084206024358086529086528185205492855260d786528185209085528552909220546044359061310f565b908082116102eb575b50604051908152f35b9050386102e2565b503461020c578060031936011261020c57602060cd54604051908152f35b823461020c57602036600319011261020c5761035261033562015180843504612de7565b604080519384526020840192909252908201529081906060820190565b0390f35b823461020c57604036600319011261020c57602061037e61037561206e565b602435906126ba565b604051908152f35b823461020c57604036600319011261020c5760209060ff906040906001600160a01b036103b161206e565b16815260d58452818120602435825284522054166040519015158152f35b823461020c578060031936011261020c57602060df54604051908152f35b823461020c57604036600319011261020c57602061041561040c61206e565b60243590612908565b6040519015158152f35b823461020c578060031936011261020c57610438612510565b80f35b823461020c57604036600319011261020c576020906040906001600160a01b0361046361206e565b16815260dc8352818120602435825283522054604051908152f35b823461020c57604036600319011261020c576020906040906001600160a01b036104a661206e565b16815260d88352818120602435825283522054604051908152f35b823461020c57604036600319011261020c576020906040906001600160a01b036104e961206e565b16815260d68352818120602435825283522054604051908152f35b823461020c576020908160031936011261020c5782359067ffffffffffffffff93848311610685573660238401121561068557820135918483116106855760059460243685881b84018201116106815761055f85939561245d565b9461056d60405196876120fe565b838652601f1961057c8561245d565b0187865b82811061067157505050368190036042190190855b8581106105fc575050505050506040519280840190808552835180925280604083818801981b870101940192955b8287106105d05785850386f35b9091929382806105ec600193603f198a82030186528851612191565b96019201960195929190926105c3565b83818b1b830101358381121561066d5782018481013590868211610669576044019080360382136106695761063a610664939261064992369161213c565b610642612323565b903061237d565b610653828b61249a565b5261065e818a61249a565b50612475565b610595565b8880fd5b8780fd5b6060898201830152899101610580565b8380fd5b5080fd5b823461020c57604036600319011261020c576020906040906001600160a01b036106b161206e565b16815260da8352818120602435825283522054604051908152f35b905034610685576106dc36612084565b916106ea8282959395612a36565b6106f484826129d1565b6106fe84826126fb565b8194911561090b5760018060a01b0380931694858852602060dc815260408920888a528152604089206107328382546124d7565b905586895260d9815260408920888a528152604089206107538482546124d7565b90558886828760c95416604051928380926361d027b360e01b82525afa801561088c57879183916108de575b5060408051636676fbc560e11b8152808b018781526001600160a01b038a166020820152909a939092169185918b918291010381845afa9889156108d357839961089b575b50803b156108975760408051631a4ca37b60e21b81526001600160a01b038916938101938452602084018b90523391840191909152918391839182908490829060600103925af1801561088c5761086a575b50947f547e9b3e3fc8b51c03d30648b377a2b951e562fabd27fb3e91925c87859e192a9460e09489948b8a95604051978852870152336040870152606086015260808501521660a083015260c0820152a180f35b61087b9098979695949392986120ea565b610669579091929394958838610816565b6040513d84823e3d90fd5b8280fd5b8480929a508194503d83116108cc575b6108b581836120fe565b810103126108c7578a915197386107c4565b600080fd5b503d6108ab565b6040513d85823e3d90fd5b6108fe9150843d8611610904575b6108f681836120fe565b8101906124e4565b3861077f565b503d6108ec565b60405162461bcd60e51b8152602081860152601060248201526f6e6f742068617320726577617264732160801b6044820152606490fd5b823461020c578060031936011261020c57602060de54604051908152f35b823461020c57604036600319011261020c576020906040906001600160a01b0361098861206e565b16815260d98352818120602435825283522054604051908152f35b823461020c578060031936011261020c57602060cb54604051908152f35b823461020c57604036600319011261020c5760406109e96109e061206e565b602435906126fb565b82519182526020820152f35b823461020c576040602091610a0936612058565b90825260d2845282822090825283522054604051908152f35b823461020c578060031936011261020c57602060d054604051908152f35b823461020c57604036600319011261020c576080906040906001600160a01b03610a6861206e565b16815260dd6020528181206024358252602052208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b823461020c576040602091610abb36612058565b90825260d1845282822090825283522054604051908152f35b823461020c57606036600319011261020c5760c954602435908335906001600160a01b039081169060443590823b15610d3a57604051630ceb3b9b60e21b815233888201528681602481875afa8015610c7e57908791610d26575b50508115610ce257610b418585612ad7565b60d45410610c895760405180936361d027b360e01b8252818960209687935afa908115610c7e579084918891610c61575b508860405180948193632f6ee69560e01b8352165afa908115610c56578691610c29575b50604d8111610c165791610bd4610c10927fe3bbfa79647df19774fdc8af2dbe30c95db0f1d2bb02678af401cc570495b14a969594600a0a906124c4565b9083875260d181526040872090858852528060408720558260de558360df55604051938493846040919493926060820195825260208201520152565b0390a180f35b634e487b7160e01b865260118752602486fd5b90508281813d8311610c4f575b610c4081836120fe565b810103126108c7575187610b96565b503d610c36565b6040513d88823e3d90fd5b610c789150823d8411610904576108f681836120fe565b89610b72565b6040513d89823e3d90fd5b60405162461bcd60e51b8152602081890152602c60248201527f63616e6e6f7420736574206561726e696e677320666f7220616e20756e65787060448201526b6972656420706572696f642160a01b6064820152608490fd5b60405162461bcd60e51b8152602081890152601860248201527f6561726e696e67732063616e6e6f74206265207a65726f2100000000000000006044820152606490fd5b610d2f906120ea565b610d3a578588610b2f565b8580fd5b823461020c578060031936011261020c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610d9857602060405160008051602061323a8339815191528152f35b60849060206040519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b9050604036600319011261068557610e1861206e565b60243567ffffffffffffffff811161068157610e379036908401612173565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190610e70308414156121d1565b610e8d60008051602061323a833981519152938285541614612232565b858160c95416803b15610685578160249160405192838092630ceb3b9b60e21b8252338c8301525afa801561088c57611072575b50507f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610efa575050506104389150612293565b6040516352d1902d60e01b81526020949293918316919085818881865afa60009181611043575b50610f815760405162461bcd60e51b8152808801879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b95929491939503610fee575050610f9782612293565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610fe6575b610fd057505080f35b610fe291610fdc612323565b9161237d565b5080f35b506001610fc7565b60405162461bcd60e51b815291820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260849150fd5b90918782813d831161106b575b61105a81836120fe565b8101031261020c5750519038610f21565b503d611050565b61107b906120ea565b610d3a578538610ec1565b823461020c578060031936011261020c57506040516040810181811067ffffffffffffffff8211176110dd5791610352926040528152630ccd8caf60e31b6020820152604051918291602083526020830190612191565b604183634e487b7160e01b6000525260246000fd5b823461020c578060031936011261020c57604060de5460df5482519182526020820152f35b9050346106855760c03660031901126106855761113261206e565b90602480359160448035906064908135906084359289549860ff8a60081c1615998a809b61146d575b8015611456575b156113fe5760ff1981166001178c558a6113ed575b5088156113ad57888611156113525783156113125784156112c6576001600160a01b03169182156112965750506bffffffffffffffffffffffff60a01b60c954161760c9558560ca558260cb5560cc5560cd5560a43560ce556111e6620151806111e04261314a565b04612de7565b50906111f28282612ad7565b60d45560de5560df5580600c0290600c82040361128457600181018091116112845760d05582600c0292600c840403611273576001830180931161127357505060cf5561123c5780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b634e487b7160e01b85526011905283fd5b50634e487b7160e01b85526011905283fd5b6c5f61646472657373426f6f6b2160981b8791600d8a60206040519562461bcd60e51b8752860152840152820152fd5b60405162461bcd60e51b81526020818901526022818a01527f5f696e697469616c52657761726473526174652063616e6e6f74206265207a658185015261726f60f01b81840152608490fd5b5060405162461bcd60e51b8152602081880152601d818901527f5f696e697469616c4d6f6e7468732063616e6e6f74206265207a65726f00000081840152fd5b60405162461bcd60e51b81526020818901526031818a01527f5f6d61784c6f636b5965617273206d75737420626520677265617465722074688185015270616e205f6d696e4c6f636b59656172732160781b81840152608490fd5b5060405162461bcd60e51b8152602081880152601c818901527f5f6d696e4c6f636b59656172732063616e6e6f74206265207a65726f0000000081840152fd5b61ffff1916610101178b5538611177565b60405162461bcd60e51b81526020818a0152602e818b01527f496e697469616c697a61626c653a20636f6e747261637420697320616c726561818601526d191e481a5b9a5d1a585b1a5e995960921b81850152608490fd5b50303b1580156111625750600160ff821614611162565b50600160ff82161061115b565b823461020c57604036600319011261020c576020906040906001600160a01b036114a261206e565b16815260d78352818120602435825283522054604051908152f35b905034610685576060366003190112610685576114d861206e565b906024359160443567ffffffffffffffff81116118bf576114fc9036908401612173565b5060c9546001600160a01b03919082169085823b1561020c578060249360405194858092634006035160e11b8252338a8301525afa9283156118c35784936118a6575b5050169081855260209360d5855260408620818752855260408620600160ff1982541617905582865260d68552604086208187528552426040872055611595620151809261158e844204612de7565b9391612ad7565b9285895260d7885260408920818a5288528360408a20556040519263501ad8ff60e11b8452888489818a5afa938415611859578a94611877575b50868a5260d8895260408a20828b5289528360408b20556115fb6115f4878704612de7565b5090612fc9565b670de0b6b3a76400009180830290838204036118645760018201809211611864579161162e86959493928d98979361269a565b61163890836124c4565b049688875260db8b52604087208388528b528760408820558a888a60d054611660908a61310f565b998a9382825260da815260408220888352815284604083205560cc54611686908c61310f565b86611692818304612de7565b5091909261169f9061308a565b046116a990612de7565b50929091896116b78a61314a565b046116c190612de7565b509a9099046116cf90612de7565b50986116db919c612503565b91865260d3855260408620908652845260408520908154906116fc916124d7565b9055835260d38252604083209083528152604082208d81549061171e916124d7565b905561172a8d8b612503565b85835260d28252604083208784528252604083209081549061174b916124d7565b905586825260d28152604082208483528152604082208d81549061176e916124d7565b90556040519661177d886120b8565b8752860192835260408601938452606086019485525260dd8d528d8d604082209087835252604090209351845551600184015551600283015551906003015580604051986331a9108f60e11b8a52890152888888815a91602492fa908115611859577f4f3aeb95ef90e269e25a364ec94a5a917cebe0799f3ebb164c9d8a40db32511a99610100998c9361183a575b50604051988952880152166040860152606085015242608085015260a084015260c083015260e0820152a180f35b816118529294503d8511610904576108f681836120fe565b913861180c565b6040513d8c823e3d90fd5b634e487b7160e01b8c5260118a5260248cfd5b9093508881813d831161189f575b61188f81836120fe565b810103126108c7575192386115cf565b503d611885565b6118b2919293506120ea565b6118bf578190853861153f565b8480fd5b50604051903d90823e3d90fd5b90503461068557602080600319360112610897576118ec61206e565b906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116611924308214156121d1565b61194160008051602061323a833981519152918383541614612232565b858260c95416803b15610685578160249160405192838092630ceb3b9b60e21b8252338c8301525afa801561088c57611aec575b50506040519183830183811067ffffffffffffffff821117611ad7576040528683527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156119cf57505050506104389150612293565b8492939416906040516352d1902d60e01b815285818881865afa60009181611aa8575b50611a525760405162461bcd60e51b8152808801879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b95929491939503610fee575050611a6882612293565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590611aa057610fd057505080f35b506000610fc7565b90918782813d8311611ad0575b611abf81836120fe565b8101031261020c57505190386119f2565b503d611ab5565b604187634e487b7160e01b6000525260246000fd5b611af5906120ea565b610d3a578538611975565b90503461068557611b1036612084565b91611b1e8282959395612a36565b611b2884826129d1565b611b328482612908565b15611f37576201518092611ca085611b4b864204612de7565b506001600160a01b03808716808c5260da60209081526040808e20878f529091528c205490999197938a92611c48928e611b844261314a565b91808311611f2f575b611ba7611b9e849560409504612de7565b509290956131d9565b9387835260db6020528383208b84526020528383205498899689855260dd6020528585208d865260205285852099600387519b611be38d6120b8565b80548d528c602060018301549101528c896002830154910152015460608c0152855260d86020528585208d865260205285852054968015600014611ee357505050825260d260205282822090825260205220611c408382546124d7565b90555b612503565b60408201518c5260d260205260408c2060608301518d52602052611c7160408d20918254612503565b905580518b5260d2602052602060408c209101518b52602052611c9960408b20918254612503565b9055612954565b9484875260dc6020526040872081885260205260408720611cc28782546124d7565b90558360208460c95416604051928380926361d027b360e01b82525afa8015611ed85784918991611eb9575b5060408051636676fbc560e11b81528088018a81526001600160a01b03871660208281019190915291989490931692909188918291010381845afa958615611eae578996611e7a575b508515611e4757863b1561066957604051630852cd8d60e31b81528281018490528981602481838c5af1801561185957611e32575b50908189923b156108975760408051631a4ca37b60e21b81526001600160a01b038716938101938452602084018990523391840191909152918391839182908490829060600103925af1801561088c57611e10575b50937f5d431a60d05c2d376ada5a88a66968da29820db1acf8a7ce7b3086c7cc3191cf9360c0938888946040519586526020860152336040860152606085015216608083015260a0820152a180f35b611e1f909695949392966120ea565b611e2e57909192938638611dc1565b8680fd5b611e3f90999192996120ea565b979038611d6c565b60405162461bcd60e51b8152602081840152600c60248201526b7a65726f20616d6f756e742160a01b6044820152606490fd5b9095506020813d602011611ea6575b81611e96602093836120fe565b8101031261066957519438611d37565b3d9150611e89565b6040513d8b823e3d90fd5b611ed2915060203d602011610904576108f681836120fe565b38611cee565b6040513d8a823e3d90fd5b9193509150600103611f135750508551815260d26020528181206020870151825260205220611c408282546124d7565b825260d260205282822090825260205220611c408282546124d7565b915081611b8d565b60405162461bcd60e51b8152602081840152600b60248201526a63616e27742073656c6c2160a81b6044820152606490fd5b823461020c57604036600319011261020c57602061037e611f8861206e565b60243590612954565b823461020c576040602091611fa536612058565b90825260d3845282822090825283522054604051908152f35b823461020c578060031936011261020c57602060ce54604051908152f35b823461020c578060031936011261020c57602060cc54604051908152f35b823461020c578060031936011261020c57602060ca54604051908152f35b823461020c578060031936011261020c57602060cf54604051908152f35b823461020c578060031936011261020c57610352610335620151804204612de7565b60409060031901126108c7576004359060243590565b600435906001600160a01b03821682036108c757565b60609060031901126108c7576001600160a01b0360043581811681036108c757916024359160443590811681036108c75790565b6080810190811067ffffffffffffffff8211176120d457604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116120d457604052565b90601f8019910116810190811067ffffffffffffffff8211176120d457604052565b67ffffffffffffffff81116120d457601f01601f191660200190565b92919261214882612120565b9161215660405193846120fe565b8294818452818301116108c7578281602093846000960137010152565b9080601f830112156108c75781602061218e9335910161213c565b90565b919082519283825260005b8481106121bd575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161219c565b156121d857565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561223957565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b803b156122c85760008051602061323a83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b604051906060820182811067ffffffffffffffff8211176120d45760405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b60008061218e9493602081519101845af43d156123bc573d9161239f83612120565b926123ad60405194856120fe565b83523d6000602085013e6123c0565b6060915b9192901561242257508151156123d4575090565b3b156123dd5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156124355750805190602001fd5b60405162461bcd60e51b815260206004820152908190612459906024830190612191565b0390fd5b67ffffffffffffffff81116120d45760051b60200190565b60001981146124845760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156124ae5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b8181029291811591840414171561248457565b9190820180921161248457565b908160209103126108c757516001600160a01b03811681036108c75790565b9190820391821161248457565b60c9546001600160a01b03166000813b1561020c57602481604093845192838092630ceb3b9b60e21b82523360048301525afa801561269057612681575b5060d4549161255d42846131d9565b91821561266757600019830192831161266d57821561266757805b838110612588575050505060d455565b612662907fb2f0ca0b2a366734800f5e4bf2608f0b4677deb5fbed86b6d191b22c57196bfb6126126125ce9761265a6125d78861262b6125df620151809d8e8704612de7565b5094909661308a565b9d8e04612de7565b50818c5260d36020818152948d20828e5285528d8d2054978d528085528d8d20958d529484528c8c2054909791966124d7565b858b5260d283528b8b20878c5283528b8b205490612503565b91848a52815289892090858a525280898920558851938493846040919493926060820195825260208201520152565b0390a1612475565b612578565b50505050565b634e487b7160e01b81526011600452602490fd5b61268a906120ea565b3861254e565b83513d84823e3d90fd5b81156126a4570490565b634e487b7160e01b600052601260045260246000fd5b60018060a01b031660005260d76020526040600020906000526020526040600020546126ea60d0549142906131d9565b908082116126f6575090565b905090565b9160009260009260018060a01b038216908160005260d76020526040600020816000526020526040600020548260005260d86020526040600020826000526020526040600020548360005260d96020526040600020836000526020526040600020549360005260db6020526040600020836000526020526040600020549060d0549261278d60cc549560cd54986126ba565b95965b8688106127a2575b5050505050505050565b909192939495969899868a11156128b3575b6127c5620151806111e08c8661310f565b508160009392935260d1602052604060002081600052602052604060002054801561288957868a8e036128545750916128366128489461283c93612815612842966128108d8d612503565b6124c4565b9160005260d36020526040600020906000526020526040600020549061269a565b906124d7565b9b612475565b99612475565b96959493929190612790565b89600094929394198101116124845761284894612842948f61283c9561283694612815928f60001901036124c457508c6124c4565b50509a9950505050505050505081156128aa575b3880808080808080612798565b6000925061289d565b6128d79082858c6128ec57506128d0612710916128108989612503565b04906124d7565b868a10156127b4579961284261284891612475565b898d14612901575b612710916128d0916124c4565b50866128f4565b9060018060a01b03821660005260d96020526040600020816000526020526040600020549060cf548210159283612940575b50505090565b61294b9293506126ba565b1438808061293a565b9061295f81836126ba565b9160cf5483106129c95782156124845760018060a01b031660005260d8602052604060002090600052602052612710600c6129b06129a76040600020549460001901856124c4565b60ce54906124c4565b04048181116129c25761218e91612503565b5050600090565b505050600090565b60018060a01b031660005260d560205260406000209060005260205260ff60406000205416156129fd57565b60405162461bcd60e51b815260206004820152601160248201527037b7363c9039ba30b5b2b2103a37b5b2b760791b6044820152606490fd5b90604051906331a9108f60e11b8252600482015260208160248160018060a01b038096165afa908115612acb57600091612aad575b50163303612a7557565b60405162461bcd60e51b815260206004820152601060248201526f6f6e6c79206974656d206f776e65722160801b6044820152606490fd5b612ac5915060203d8111610904576108f681836120fe565b38612a6b565b6040513d6000823e3d90fd5b906107b282106108c7576112c09081830191821292600092838212928315958015851690871617612c685760049586612b25612b20600c9586612b1987612c7c565b0590612ca7565b612cc3565b0580617d49190190811215600116612c55576001198301838113600116612c2f5784612b5085612c7c565b059085820291808305871490151715612c425790612b6d91612c8e565b61016f9080820291820503612c2f579084612b89920590612ca7565b9461132480950194851290811516911617612c1c5791612bae91612b19606494612c7c565b0580600302906003820503612c09579083612bca920590612c8e565b9162253d8b198301928313600116612bf6576201518092838102938185041490151715612bf657505090565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118452602483fd5b634e487b7160e01b855260118652602485fd5b634e487b7160e01b885260118952602488fd5b634e487b7160e01b895260118a52602489fd5b634e487b7160e01b875260118852602487fd5b634e487b7160e01b85526011600452602485fd5b90600d19820191821360011661248457565b8181039291600013801582851316918412161761248457565b9190916000838201938412911290801582169115161761248457565b906105b5918083029283050361248457565b6107b281106108c757617d4a198301928313600116612484576112c09081810191821291600093848312938415908015861690821617612dd357612d2960049788612b19612b20600c9788612b1989612c7c565b6001198301838113600116612c2f5784612d4285612c7c565b059085820291808305871490151715612c425790612d5f91612c8e565b61016f9080820291820503612c2f579084612d7b920590612ca7565b9461132480950194851290811516911617612c1c5791612da091612b19606494612c7c565b0580600302906003820503612c09579083612dbc920590612c8e565b9162253d8b198301928313600116612bf657505090565b634e487b7160e01b86526011600452602486fd5b62010bd99182820192831291600092838212908015821691151617612fb5576226496501928262253d8c85129112908015821691151617612fa1578260021b6004938482058103612f8e5762023ab1809205918281029081058303612c1c57600381019085600383129112908015821691151617612c1c579085612e6c920590612c8e565b6001810160018112858312908015821691151617612c1c57610fa09080820291820503612c1c5762164b09612eae91059186612ea784612cc3565b0590612c8e565b91601f83019285601f85129112908015821691151617612c1c578260500292605084058103610c165761098f809405938481029081058503612c5557906050612ef8920590612c8e565b94600b840593600281019082600283129112908015821691151617612f7b5784600c0290600c82058603612f685790612f3091612c8e565b966030198301928313600116612bf65782606402926064840503612bf6575050612f639291612f5e91612ca7565b612ca7565b929190565b634e487b7160e01b835260118952602483fd5b634e487b7160e01b825260118852602482fd5b634e487b7160e01b845260118552602484fd5b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526011600452602483fd5b90600181148015613080575b8015613076575b801561306c575b8015613062575b8015613058575b801561304e575b15613004575050601f90565b6002146130115750601e90565b60038116159081613041575b8115613034575b501561302f57601d90565b601c90565b6101909150061538613024565b606481061515915061301d565b50600c8114612ff8565b50600a8114612ff1565b5060088114612fea565b5060078114612fe3565b5060058114612fdc565b5060038114612fd5565b906201518061309a818404612de7565b91908291600182018211612484576130b7600c91828404906124d7565b91069060018201809211612484576130e1936130d38383612fc9565b809111613107575b50612cd5565b81810290808204831490151715612484576130fe918406906124d7565b9182106108c757565b9250386130db565b919061312e6201518091613124838604612de7565b93909284936124d7565b600019810191908211612484576130b7600c91828404906124d7565b906201518061315a818404612de7565b91908291600c810290808204600c1490151715612484576000199180830190811161248457613188916124d7565b90810190811161248457600c80820491069060018201809211612484576131b3936130d38383612fc9565b81810290808204831490151715612484576131d0918406906124d7565b9182116108c757565b8181116108c7576131fc6131f262015180809304612de7565b5092909304612de7565b50600c820291808304600c149015171561248457613219916124d7565b600c830292808404600c14901517156124845761218e92611c439161250356fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca264697066735822122032c68efe5f4afff05f30db086007e11b65648963834806d8ebc3f55c031ff45164736f6c63430008120033",
  "deployedBytecode": "0x608060405260048036101561001357600080fd5b600090813560e01c90816306040618146120365781631421857414612018578163254d8a1214611ffa57816328d5708e14611fdc57816328eac12314611fbe5781632bd4978014611f915781632e6155c714611f695781633540c91914611b005781633659cfe6146118d05781633e12170f146114bd5781633f315ab71461147a57816345ff4c80146111175781634d29565e146110f25781634d6f3824146110865781634f1ef28614610e0257816352d1902d14610d3e5781635d34893b14610ad45781636924ac9514610aa75781636e675dbf14610a405781637311215914610a2257816377c830ee146109f5578163819f8f11146109c15781638a9e5576146109a35781639a05d060146109605781639af6bdb3146109425781639e96a260146106cc578163a3ad309a14610689578163ac9650d814610504578163b1b0db13146104c1578163b99c5a141461047e578163bec03dd11461043b578163c175b3d11461041f578163c76659a1146103ed578163d7dad7c3146103cf578163de6c7fd214610386578163e44be58014610356578163e544b2e21461031157508063ec78c4c3146102f3578063f1dfa8671461027b578063f23d30df14610238578063f5887cdd1461020f5763fbaf894c146101ef57600080fd5b3461020c578060031936011261020c57602060d454604051908152f35b80fd5b503461020c578060031936011261020c5760c9546040516001600160a01b039091168152602090f35b503461020c57604036600319011261020c576020906040906001600160a01b0361026061206e565b16815260db8352818120602435825283522054604051908152f35b503461020c57606036600319011261020c576020906102d961029b61206e565b6001600160a01b031680835260da845260408084206024358086529086528185205492855260d786528185209085528552909220546044359061310f565b908082116102eb575b50604051908152f35b9050386102e2565b503461020c578060031936011261020c57602060cd54604051908152f35b823461020c57602036600319011261020c5761035261033562015180843504612de7565b604080519384526020840192909252908201529081906060820190565b0390f35b823461020c57604036600319011261020c57602061037e61037561206e565b602435906126ba565b604051908152f35b823461020c57604036600319011261020c5760209060ff906040906001600160a01b036103b161206e565b16815260d58452818120602435825284522054166040519015158152f35b823461020c578060031936011261020c57602060df54604051908152f35b823461020c57604036600319011261020c57602061041561040c61206e565b60243590612908565b6040519015158152f35b823461020c578060031936011261020c57610438612510565b80f35b823461020c57604036600319011261020c576020906040906001600160a01b0361046361206e565b16815260dc8352818120602435825283522054604051908152f35b823461020c57604036600319011261020c576020906040906001600160a01b036104a661206e565b16815260d88352818120602435825283522054604051908152f35b823461020c57604036600319011261020c576020906040906001600160a01b036104e961206e565b16815260d68352818120602435825283522054604051908152f35b823461020c576020908160031936011261020c5782359067ffffffffffffffff93848311610685573660238401121561068557820135918483116106855760059460243685881b84018201116106815761055f85939561245d565b9461056d60405196876120fe565b838652601f1961057c8561245d565b0187865b82811061067157505050368190036042190190855b8581106105fc575050505050506040519280840190808552835180925280604083818801981b870101940192955b8287106105d05785850386f35b9091929382806105ec600193603f198a82030186528851612191565b96019201960195929190926105c3565b83818b1b830101358381121561066d5782018481013590868211610669576044019080360382136106695761063a610664939261064992369161213c565b610642612323565b903061237d565b610653828b61249a565b5261065e818a61249a565b50612475565b610595565b8880fd5b8780fd5b6060898201830152899101610580565b8380fd5b5080fd5b823461020c57604036600319011261020c576020906040906001600160a01b036106b161206e565b16815260da8352818120602435825283522054604051908152f35b905034610685576106dc36612084565b916106ea8282959395612a36565b6106f484826129d1565b6106fe84826126fb565b8194911561090b5760018060a01b0380931694858852602060dc815260408920888a528152604089206107328382546124d7565b905586895260d9815260408920888a528152604089206107538482546124d7565b90558886828760c95416604051928380926361d027b360e01b82525afa801561088c57879183916108de575b5060408051636676fbc560e11b8152808b018781526001600160a01b038a166020820152909a939092169185918b918291010381845afa9889156108d357839961089b575b50803b156108975760408051631a4ca37b60e21b81526001600160a01b038916938101938452602084018b90523391840191909152918391839182908490829060600103925af1801561088c5761086a575b50947f547e9b3e3fc8b51c03d30648b377a2b951e562fabd27fb3e91925c87859e192a9460e09489948b8a95604051978852870152336040870152606086015260808501521660a083015260c0820152a180f35b61087b9098979695949392986120ea565b610669579091929394958838610816565b6040513d84823e3d90fd5b8280fd5b8480929a508194503d83116108cc575b6108b581836120fe565b810103126108c7578a915197386107c4565b600080fd5b503d6108ab565b6040513d85823e3d90fd5b6108fe9150843d8611610904575b6108f681836120fe565b8101906124e4565b3861077f565b503d6108ec565b60405162461bcd60e51b8152602081860152601060248201526f6e6f742068617320726577617264732160801b6044820152606490fd5b823461020c578060031936011261020c57602060de54604051908152f35b823461020c57604036600319011261020c576020906040906001600160a01b0361098861206e565b16815260d98352818120602435825283522054604051908152f35b823461020c578060031936011261020c57602060cb54604051908152f35b823461020c57604036600319011261020c5760406109e96109e061206e565b602435906126fb565b82519182526020820152f35b823461020c576040602091610a0936612058565b90825260d2845282822090825283522054604051908152f35b823461020c578060031936011261020c57602060d054604051908152f35b823461020c57604036600319011261020c576080906040906001600160a01b03610a6861206e565b16815260dd6020528181206024358252602052208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b823461020c576040602091610abb36612058565b90825260d1845282822090825283522054604051908152f35b823461020c57606036600319011261020c5760c954602435908335906001600160a01b039081169060443590823b15610d3a57604051630ceb3b9b60e21b815233888201528681602481875afa8015610c7e57908791610d26575b50508115610ce257610b418585612ad7565b60d45410610c895760405180936361d027b360e01b8252818960209687935afa908115610c7e579084918891610c61575b508860405180948193632f6ee69560e01b8352165afa908115610c56578691610c29575b50604d8111610c165791610bd4610c10927fe3bbfa79647df19774fdc8af2dbe30c95db0f1d2bb02678af401cc570495b14a969594600a0a906124c4565b9083875260d181526040872090858852528060408720558260de558360df55604051938493846040919493926060820195825260208201520152565b0390a180f35b634e487b7160e01b865260118752602486fd5b90508281813d8311610c4f575b610c4081836120fe565b810103126108c7575187610b96565b503d610c36565b6040513d88823e3d90fd5b610c789150823d8411610904576108f681836120fe565b89610b72565b6040513d89823e3d90fd5b60405162461bcd60e51b8152602081890152602c60248201527f63616e6e6f7420736574206561726e696e677320666f7220616e20756e65787060448201526b6972656420706572696f642160a01b6064820152608490fd5b60405162461bcd60e51b8152602081890152601860248201527f6561726e696e67732063616e6e6f74206265207a65726f2100000000000000006044820152606490fd5b610d2f906120ea565b610d3a578588610b2f565b8580fd5b823461020c578060031936011261020c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610d9857602060405160008051602061323a8339815191528152f35b60849060206040519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b9050604036600319011261068557610e1861206e565b60243567ffffffffffffffff811161068157610e379036908401612173565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190610e70308414156121d1565b610e8d60008051602061323a833981519152938285541614612232565b858160c95416803b15610685578160249160405192838092630ceb3b9b60e21b8252338c8301525afa801561088c57611072575b50507f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610efa575050506104389150612293565b6040516352d1902d60e01b81526020949293918316919085818881865afa60009181611043575b50610f815760405162461bcd60e51b8152808801879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b95929491939503610fee575050610f9782612293565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610fe6575b610fd057505080f35b610fe291610fdc612323565b9161237d565b5080f35b506001610fc7565b60405162461bcd60e51b815291820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260849150fd5b90918782813d831161106b575b61105a81836120fe565b8101031261020c5750519038610f21565b503d611050565b61107b906120ea565b610d3a578538610ec1565b823461020c578060031936011261020c57506040516040810181811067ffffffffffffffff8211176110dd5791610352926040528152630ccd8caf60e31b6020820152604051918291602083526020830190612191565b604183634e487b7160e01b6000525260246000fd5b823461020c578060031936011261020c57604060de5460df5482519182526020820152f35b9050346106855760c03660031901126106855761113261206e565b90602480359160448035906064908135906084359289549860ff8a60081c1615998a809b61146d575b8015611456575b156113fe5760ff1981166001178c558a6113ed575b5088156113ad57888611156113525783156113125784156112c6576001600160a01b03169182156112965750506bffffffffffffffffffffffff60a01b60c954161760c9558560ca558260cb5560cc5560cd5560a43560ce556111e6620151806111e04261314a565b04612de7565b50906111f28282612ad7565b60d45560de5560df5580600c0290600c82040361128457600181018091116112845760d05582600c0292600c840403611273576001830180931161127357505060cf5561123c5780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b634e487b7160e01b85526011905283fd5b50634e487b7160e01b85526011905283fd5b6c5f61646472657373426f6f6b2160981b8791600d8a60206040519562461bcd60e51b8752860152840152820152fd5b60405162461bcd60e51b81526020818901526022818a01527f5f696e697469616c52657761726473526174652063616e6e6f74206265207a658185015261726f60f01b81840152608490fd5b5060405162461bcd60e51b8152602081880152601d818901527f5f696e697469616c4d6f6e7468732063616e6e6f74206265207a65726f00000081840152fd5b60405162461bcd60e51b81526020818901526031818a01527f5f6d61784c6f636b5965617273206d75737420626520677265617465722074688185015270616e205f6d696e4c6f636b59656172732160781b81840152608490fd5b5060405162461bcd60e51b8152602081880152601c818901527f5f6d696e4c6f636b59656172732063616e6e6f74206265207a65726f0000000081840152fd5b61ffff1916610101178b5538611177565b60405162461bcd60e51b81526020818a0152602e818b01527f496e697469616c697a61626c653a20636f6e747261637420697320616c726561818601526d191e481a5b9a5d1a585b1a5e995960921b81850152608490fd5b50303b1580156111625750600160ff821614611162565b50600160ff82161061115b565b823461020c57604036600319011261020c576020906040906001600160a01b036114a261206e565b16815260d78352818120602435825283522054604051908152f35b905034610685576060366003190112610685576114d861206e565b906024359160443567ffffffffffffffff81116118bf576114fc9036908401612173565b5060c9546001600160a01b03919082169085823b1561020c578060249360405194858092634006035160e11b8252338a8301525afa9283156118c35784936118a6575b5050169081855260209360d5855260408620818752855260408620600160ff1982541617905582865260d68552604086208187528552426040872055611595620151809261158e844204612de7565b9391612ad7565b9285895260d7885260408920818a5288528360408a20556040519263501ad8ff60e11b8452888489818a5afa938415611859578a94611877575b50868a5260d8895260408a20828b5289528360408b20556115fb6115f4878704612de7565b5090612fc9565b670de0b6b3a76400009180830290838204036118645760018201809211611864579161162e86959493928d98979361269a565b61163890836124c4565b049688875260db8b52604087208388528b528760408820558a888a60d054611660908a61310f565b998a9382825260da815260408220888352815284604083205560cc54611686908c61310f565b86611692818304612de7565b5091909261169f9061308a565b046116a990612de7565b50929091896116b78a61314a565b046116c190612de7565b509a9099046116cf90612de7565b50986116db919c612503565b91865260d3855260408620908652845260408520908154906116fc916124d7565b9055835260d38252604083209083528152604082208d81549061171e916124d7565b905561172a8d8b612503565b85835260d28252604083208784528252604083209081549061174b916124d7565b905586825260d28152604082208483528152604082208d81549061176e916124d7565b90556040519661177d886120b8565b8752860192835260408601938452606086019485525260dd8d528d8d604082209087835252604090209351845551600184015551600283015551906003015580604051986331a9108f60e11b8a52890152888888815a91602492fa908115611859577f4f3aeb95ef90e269e25a364ec94a5a917cebe0799f3ebb164c9d8a40db32511a99610100998c9361183a575b50604051988952880152166040860152606085015242608085015260a084015260c083015260e0820152a180f35b816118529294503d8511610904576108f681836120fe565b913861180c565b6040513d8c823e3d90fd5b634e487b7160e01b8c5260118a5260248cfd5b9093508881813d831161189f575b61188f81836120fe565b810103126108c7575192386115cf565b503d611885565b6118b2919293506120ea565b6118bf578190853861153f565b8480fd5b50604051903d90823e3d90fd5b90503461068557602080600319360112610897576118ec61206e565b906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116611924308214156121d1565b61194160008051602061323a833981519152918383541614612232565b858260c95416803b15610685578160249160405192838092630ceb3b9b60e21b8252338c8301525afa801561088c57611aec575b50506040519183830183811067ffffffffffffffff821117611ad7576040528683527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156119cf57505050506104389150612293565b8492939416906040516352d1902d60e01b815285818881865afa60009181611aa8575b50611a525760405162461bcd60e51b8152808801879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b95929491939503610fee575050611a6882612293565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590611aa057610fd057505080f35b506000610fc7565b90918782813d8311611ad0575b611abf81836120fe565b8101031261020c57505190386119f2565b503d611ab5565b604187634e487b7160e01b6000525260246000fd5b611af5906120ea565b610d3a578538611975565b90503461068557611b1036612084565b91611b1e8282959395612a36565b611b2884826129d1565b611b328482612908565b15611f37576201518092611ca085611b4b864204612de7565b506001600160a01b03808716808c5260da60209081526040808e20878f529091528c205490999197938a92611c48928e611b844261314a565b91808311611f2f575b611ba7611b9e849560409504612de7565b509290956131d9565b9387835260db6020528383208b84526020528383205498899689855260dd6020528585208d865260205285852099600387519b611be38d6120b8565b80548d528c602060018301549101528c896002830154910152015460608c0152855260d86020528585208d865260205285852054968015600014611ee357505050825260d260205282822090825260205220611c408382546124d7565b90555b612503565b60408201518c5260d260205260408c2060608301518d52602052611c7160408d20918254612503565b905580518b5260d2602052602060408c209101518b52602052611c9960408b20918254612503565b9055612954565b9484875260dc6020526040872081885260205260408720611cc28782546124d7565b90558360208460c95416604051928380926361d027b360e01b82525afa8015611ed85784918991611eb9575b5060408051636676fbc560e11b81528088018a81526001600160a01b03871660208281019190915291989490931692909188918291010381845afa958615611eae578996611e7a575b508515611e4757863b1561066957604051630852cd8d60e31b81528281018490528981602481838c5af1801561185957611e32575b50908189923b156108975760408051631a4ca37b60e21b81526001600160a01b038716938101938452602084018990523391840191909152918391839182908490829060600103925af1801561088c57611e10575b50937f5d431a60d05c2d376ada5a88a66968da29820db1acf8a7ce7b3086c7cc3191cf9360c0938888946040519586526020860152336040860152606085015216608083015260a0820152a180f35b611e1f909695949392966120ea565b611e2e57909192938638611dc1565b8680fd5b611e3f90999192996120ea565b979038611d6c565b60405162461bcd60e51b8152602081840152600c60248201526b7a65726f20616d6f756e742160a01b6044820152606490fd5b9095506020813d602011611ea6575b81611e96602093836120fe565b8101031261066957519438611d37565b3d9150611e89565b6040513d8b823e3d90fd5b611ed2915060203d602011610904576108f681836120fe565b38611cee565b6040513d8a823e3d90fd5b9193509150600103611f135750508551815260d26020528181206020870151825260205220611c408282546124d7565b825260d260205282822090825260205220611c408282546124d7565b915081611b8d565b60405162461bcd60e51b8152602081840152600b60248201526a63616e27742073656c6c2160a81b6044820152606490fd5b823461020c57604036600319011261020c57602061037e611f8861206e565b60243590612954565b823461020c576040602091611fa536612058565b90825260d3845282822090825283522054604051908152f35b823461020c578060031936011261020c57602060ce54604051908152f35b823461020c578060031936011261020c57602060cc54604051908152f35b823461020c578060031936011261020c57602060ca54604051908152f35b823461020c578060031936011261020c57602060cf54604051908152f35b823461020c578060031936011261020c57610352610335620151804204612de7565b60409060031901126108c7576004359060243590565b600435906001600160a01b03821682036108c757565b60609060031901126108c7576001600160a01b0360043581811681036108c757916024359160443590811681036108c75790565b6080810190811067ffffffffffffffff8211176120d457604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116120d457604052565b90601f8019910116810190811067ffffffffffffffff8211176120d457604052565b67ffffffffffffffff81116120d457601f01601f191660200190565b92919261214882612120565b9161215660405193846120fe565b8294818452818301116108c7578281602093846000960137010152565b9080601f830112156108c75781602061218e9335910161213c565b90565b919082519283825260005b8481106121bd575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161219c565b156121d857565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561223957565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b803b156122c85760008051602061323a83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b604051906060820182811067ffffffffffffffff8211176120d45760405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b60008061218e9493602081519101845af43d156123bc573d9161239f83612120565b926123ad60405194856120fe565b83523d6000602085013e6123c0565b6060915b9192901561242257508151156123d4575090565b3b156123dd5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156124355750805190602001fd5b60405162461bcd60e51b815260206004820152908190612459906024830190612191565b0390fd5b67ffffffffffffffff81116120d45760051b60200190565b60001981146124845760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156124ae5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b8181029291811591840414171561248457565b9190820180921161248457565b908160209103126108c757516001600160a01b03811681036108c75790565b9190820391821161248457565b60c9546001600160a01b03166000813b1561020c57602481604093845192838092630ceb3b9b60e21b82523360048301525afa801561269057612681575b5060d4549161255d42846131d9565b91821561266757600019830192831161266d57821561266757805b838110612588575050505060d455565b612662907fb2f0ca0b2a366734800f5e4bf2608f0b4677deb5fbed86b6d191b22c57196bfb6126126125ce9761265a6125d78861262b6125df620151809d8e8704612de7565b5094909661308a565b9d8e04612de7565b50818c5260d36020818152948d20828e5285528d8d2054978d528085528d8d20958d529484528c8c2054909791966124d7565b858b5260d283528b8b20878c5283528b8b205490612503565b91848a52815289892090858a525280898920558851938493846040919493926060820195825260208201520152565b0390a1612475565b612578565b50505050565b634e487b7160e01b81526011600452602490fd5b61268a906120ea565b3861254e565b83513d84823e3d90fd5b81156126a4570490565b634e487b7160e01b600052601260045260246000fd5b60018060a01b031660005260d76020526040600020906000526020526040600020546126ea60d0549142906131d9565b908082116126f6575090565b905090565b9160009260009260018060a01b038216908160005260d76020526040600020816000526020526040600020548260005260d86020526040600020826000526020526040600020548360005260d96020526040600020836000526020526040600020549360005260db6020526040600020836000526020526040600020549060d0549261278d60cc549560cd54986126ba565b95965b8688106127a2575b5050505050505050565b909192939495969899868a11156128b3575b6127c5620151806111e08c8661310f565b508160009392935260d1602052604060002081600052602052604060002054801561288957868a8e036128545750916128366128489461283c93612815612842966128108d8d612503565b6124c4565b9160005260d36020526040600020906000526020526040600020549061269a565b906124d7565b9b612475565b99612475565b96959493929190612790565b89600094929394198101116124845761284894612842948f61283c9561283694612815928f60001901036124c457508c6124c4565b50509a9950505050505050505081156128aa575b3880808080808080612798565b6000925061289d565b6128d79082858c6128ec57506128d0612710916128108989612503565b04906124d7565b868a10156127b4579961284261284891612475565b898d14612901575b612710916128d0916124c4565b50866128f4565b9060018060a01b03821660005260d96020526040600020816000526020526040600020549060cf548210159283612940575b50505090565b61294b9293506126ba565b1438808061293a565b9061295f81836126ba565b9160cf5483106129c95782156124845760018060a01b031660005260d8602052604060002090600052602052612710600c6129b06129a76040600020549460001901856124c4565b60ce54906124c4565b04048181116129c25761218e91612503565b5050600090565b505050600090565b60018060a01b031660005260d560205260406000209060005260205260ff60406000205416156129fd57565b60405162461bcd60e51b815260206004820152601160248201527037b7363c9039ba30b5b2b2103a37b5b2b760791b6044820152606490fd5b90604051906331a9108f60e11b8252600482015260208160248160018060a01b038096165afa908115612acb57600091612aad575b50163303612a7557565b60405162461bcd60e51b815260206004820152601060248201526f6f6e6c79206974656d206f776e65722160801b6044820152606490fd5b612ac5915060203d8111610904576108f681836120fe565b38612a6b565b6040513d6000823e3d90fd5b906107b282106108c7576112c09081830191821292600092838212928315958015851690871617612c685760049586612b25612b20600c9586612b1987612c7c565b0590612ca7565b612cc3565b0580617d49190190811215600116612c55576001198301838113600116612c2f5784612b5085612c7c565b059085820291808305871490151715612c425790612b6d91612c8e565b61016f9080820291820503612c2f579084612b89920590612ca7565b9461132480950194851290811516911617612c1c5791612bae91612b19606494612c7c565b0580600302906003820503612c09579083612bca920590612c8e565b9162253d8b198301928313600116612bf6576201518092838102938185041490151715612bf657505090565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118452602483fd5b634e487b7160e01b855260118652602485fd5b634e487b7160e01b885260118952602488fd5b634e487b7160e01b895260118a52602489fd5b634e487b7160e01b875260118852602487fd5b634e487b7160e01b85526011600452602485fd5b90600d19820191821360011661248457565b8181039291600013801582851316918412161761248457565b9190916000838201938412911290801582169115161761248457565b906105b5918083029283050361248457565b6107b281106108c757617d4a198301928313600116612484576112c09081810191821291600093848312938415908015861690821617612dd357612d2960049788612b19612b20600c9788612b1989612c7c565b6001198301838113600116612c2f5784612d4285612c7c565b059085820291808305871490151715612c425790612d5f91612c8e565b61016f9080820291820503612c2f579084612d7b920590612ca7565b9461132480950194851290811516911617612c1c5791612da091612b19606494612c7c565b0580600302906003820503612c09579083612dbc920590612c8e565b9162253d8b198301928313600116612bf657505090565b634e487b7160e01b86526011600452602486fd5b62010bd99182820192831291600092838212908015821691151617612fb5576226496501928262253d8c85129112908015821691151617612fa1578260021b6004938482058103612f8e5762023ab1809205918281029081058303612c1c57600381019085600383129112908015821691151617612c1c579085612e6c920590612c8e565b6001810160018112858312908015821691151617612c1c57610fa09080820291820503612c1c5762164b09612eae91059186612ea784612cc3565b0590612c8e565b91601f83019285601f85129112908015821691151617612c1c578260500292605084058103610c165761098f809405938481029081058503612c5557906050612ef8920590612c8e565b94600b840593600281019082600283129112908015821691151617612f7b5784600c0290600c82058603612f685790612f3091612c8e565b966030198301928313600116612bf65782606402926064840503612bf6575050612f639291612f5e91612ca7565b612ca7565b929190565b634e487b7160e01b835260118952602483fd5b634e487b7160e01b825260118852602482fd5b634e487b7160e01b845260118552602484fd5b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526011600452602483fd5b90600181148015613080575b8015613076575b801561306c575b8015613062575b8015613058575b801561304e575b15613004575050601f90565b6002146130115750601e90565b60038116159081613041575b8115613034575b501561302f57601d90565b601c90565b6101909150061538613024565b606481061515915061301d565b50600c8114612ff8565b50600a8114612ff1565b5060088114612fea565b5060078114612fe3565b5060058114612fdc565b5060038114612fd5565b906201518061309a818404612de7565b91908291600182018211612484576130b7600c91828404906124d7565b91069060018201809211612484576130e1936130d38383612fc9565b809111613107575b50612cd5565b81810290808204831490151715612484576130fe918406906124d7565b9182106108c757565b9250386130db565b919061312e6201518091613124838604612de7565b93909284936124d7565b600019810191908211612484576130b7600c91828404906124d7565b906201518061315a818404612de7565b91908291600c810290808204600c1490151715612484576000199180830190811161248457613188916124d7565b90810190811161248457600c80820491069060018201809211612484576131b3936130d38383612fc9565b81810290808204831490151715612484576131d0918406906124d7565b9182116108c757565b8181116108c7576131fc6131f262015180809304612de7565b5092909304612de7565b50600c820291808304600c149015171561248457613219916124d7565b600c830292808404600c14901517156124845761218e92611c439161250356fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca264697066735822122032c68efe5f4afff05f30db086007e11b65648963834806d8ebc3f55c031ff45164736f6c63430008120033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "estimateSell(address,uint256)": {
        "details": "May return zero in collections where the cost of equipment is not returned"
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "setEarnings(uint256,uint256,uint256)": {
        "details": "Awards must be stated for each period; if there was no income, you must indicate at least $1."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setEarnings(uint256,uint256,uint256)": {
        "notice": "Protocol owner sets the income for the period"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 371,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 374,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 683,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 752,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 353,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 668,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2717,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6808,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "addressBook",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 6810,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "minLockYears",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 6812,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "maxLockYears",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 6814,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "initialMonths",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 6816,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "initialRewardsRate",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 6818,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "yearDeprecationRate",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 6820,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "minMonthsCount",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 6822,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "maxMonthsCount",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 6828,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "earnings",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6834,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "depositsToRemove",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6840,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "deposits",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6842,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "lastUpdatedTimestamp",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 6848,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "isStakedToken",
        "offset": 0,
        "slot": "213",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 6854,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "initialTimestamp",
        "offset": 0,
        "slot": "214",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6860,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "startStakingTimestamp",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6866,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "itemsPrice",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6872,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "claimedPeriodsCount",
        "offset": 0,
        "slot": "217",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6878,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "finalTimestamp",
        "offset": 0,
        "slot": "218",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6884,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "remainder",
        "offset": 0,
        "slot": "219",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6890,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "totalWithdrawn",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6906,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "depostitsDate",
        "offset": 0,
        "slot": "221",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(DepositsDate)6899_storage))"
      },
      {
        "astId": 6908,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "lastUpdatedEarningsYear",
        "offset": 0,
        "slot": "222",
        "type": "t_uint256"
      },
      {
        "astId": 6910,
        "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
        "label": "lastUpdatedEarningsMonth",
        "offset": 0,
        "slot": "223",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(DepositsDate)6899_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct FlexStakingStrategy.DepositsDate))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(DepositsDate)6899_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(DepositsDate)6899_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FlexStakingStrategy.DepositsDate)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositsDate)6899_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DepositsDate)6899_storage": {
        "encoding": "inplace",
        "label": "struct FlexStakingStrategy.DepositsDate",
        "members": [
          {
            "astId": 6892,
            "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
            "label": "finalYear",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6894,
            "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
            "label": "finalMonth",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6896,
            "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
            "label": "prevFinalYear",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6898,
            "contract": "contracts/core/stakings/FlexStakingStrategy.sol:FlexStakingStrategy",
            "label": "prevFinalMonth",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}